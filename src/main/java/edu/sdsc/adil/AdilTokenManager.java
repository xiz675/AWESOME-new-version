/* AdilTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AdilTokenManager.java */
package edu.sdsc.adil;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.json.*;
import edu.sdsc.datatype.parser.AwsmDataType;
import edu.sdsc.datatype.parser.FuncInput;
import edu.sdsc.utils.*;
import edu.sdsc.variables.logicalvariables.*;
import static edu.sdsc.utils.JsonUtil.jsonArrayToJsonSetArray;
import static edu.sdsc.utils.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.utils.ParserUtil.getCypherObjectType;
import static edu.sdsc.variables.logicalvariables.VariableTable.createVariableEntry;

/** Token Manager. */
@SuppressWarnings ("unused")
public class AdilTokenManager implements AdilConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 34:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000000000L, 0x0L);
      case 36:
         jjmatchedKind = 104;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 19;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 21;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 35;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 15;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 14;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 18;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 16;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 17;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 30;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x41008000000000L, 0x30080000040002L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xa000001000000000L, 0x1c02060000600L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800042000000000L, 0x2000000000004000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe24000000000cL, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x40100000001000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x81000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4000020000000000L, 0x4000000000000000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x1000002040L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000020L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800180000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x202000000000000L, 0x808000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10004000000000L, 0x220010L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x400000014000001L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x8000020400400000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1188100000000000L, 0x8000800L, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x880000000000L, 0x10000L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x0L);
      case 91:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 27;
         return jjMoveNfa_0(0, 0);
      case 95:
         jjmatchedKind = 121;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x41008000000000L, 0x30080000040002L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa000001000000000L, 0x1c02060000600L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800042000000000L, 0x2000000000004000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe24000000000cL, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x40100000001000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x81000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000020080000000L, 0x4000000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x1000002040L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000020L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800180000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x202000000000000L, 0x808000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10004000000000L, 0x220010L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000100000L, 0x400000014000001L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x8000020400400000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1188100000000000L, 0x8000800L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x880000000000L, 0x10000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x0L);
      case 123:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 29;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010240000000000L, active1, 0x2400004000200020L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x580002000000000L, active1, 0x28004400000L, active2, 0x1L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x101000016180L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x80000200000000L, active2, 0L);
      case 78:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4001000000000000L, active1, 0x40000c0000008002L, active2, 0L);
      case 79:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa000014000000000L, active1, 0x40c00030180641L, active2, 0L);
      case 82:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x101000000000L, active1, 0x100002081821010L, active2, 0L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x142000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x808000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000000040000L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe200000000004L, active2, 0L);
      case 89:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010240000000000L, active1, 0x2400004000200020L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x580002000100000L, active1, 0x28004400000L, active2, 0x1L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x101000016180L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x80000200000000L, active2, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4001000000000000L, active1, 0x40000c0000008002L, active2, 0L);
      case 111:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa000014000000000L, active1, 0x40c00030180641L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x101000000000L, active1, 0x100002081821010L, active2, 0L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x142000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x808000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000000040000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe200000000004L, active2, 0L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x80000080000002L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x2000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x980000L, active2, 0L);
      case 69:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000000L, active1, 0x10e20200000010cL, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 76:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa000206000000000L, active1, 0x100804400200L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x400c80000000440L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x101021010L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x408020000000000L, active1, 0x1000008000000L, active2, 0L);
      case 82:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x8000008000000000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30001000040080L, active2, 0L);
      case 84:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc8000000000L, active1, 0x6000004000218020L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 86:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         break;
      case 87:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x80000080000002L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x2000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x980000L, active2, 0L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000000L, active1, 0x10e20200000010cL, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa000206000000000L, active1, 0x100804400200L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x400c80000000440L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x101021010L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x408020000000000L, active1, 0x1000008000000L, active2, 0L);
      case 114:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x8000008000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30001000040080L, active2, 0L);
      case 116:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc8000100000L, active1, 0x6000004000218020L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 118:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         break;
      case 119:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x800041000000000L, active1, 0x2004000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe204000000004L, active2, 0L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000a000000000L, active1, 0x4000000400d00000L, active2, 0L);
      case 71:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400008000000000L, active2, 0L);
      case 72:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000001L, active2, 0L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 76:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x8000202L, active2, 0L);
      case 77:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000000L, active2, 0L);
      case 78:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10400L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x400020000000000L, active1, 0x80000008000L, active2, 0L);
      case 80:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000000L, active1, 0x80000010L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000000000L, active1, 0x2028L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0xc00000000000L, active2, 0L);
      case 84:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x100000004080L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000000000000L, active1, 0x1000000L, active2, 0L);
      case 87:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800041000000000L, active1, 0x2004000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe204000000004L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000a000000000L, active1, 0x4000000400d00000L, active2, 0L);
      case 103:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400008000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000001L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 108:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x8000202L, active2, 0L);
      case 109:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10400L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400020000000000L, active1, 0x80000008000L, active2, 0L);
      case 112:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000000L, active1, 0x80000010L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000000000L, active1, 0x2028L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0xc00000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x100000004080L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000000100000L, active1, 0x1000000L, active2, 0L);
      case 119:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000400000L);
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x1100000030610L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L);
      case 72:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x4020L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0xa800000000000000L, active1, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000001L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0x80L);
      case 80:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400020000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000000L, active1, 0x10000000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0xc82004000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10e200000000004L);
      case 88:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000400000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x1100000030610L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L);
      case 104:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x4020L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xa800000000000000L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000001L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0x80L);
      case 112:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400020000100000L, active1, 0L);
      case 115:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000000L, active1, 0x10000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0xc82004000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10e200000000004L);
      case 120:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000020600L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000002000000000L);
      case 71:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0xb000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0xc000L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000080000000L);
      case 82:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0x1c00000002010L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10002L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10004000000000L, active1, 0xe200000000004L);
      case 88:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L);
      case 97:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000020600L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000002000000000L);
      case 103:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xb000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0xc000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000080000000L);
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0x1c00000002010L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10002L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10004000000000L, active1, 0xe200000000004L);
      case 120:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1180000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xe200000000001L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010000000000000L, active1, 0x2L);
      case 76:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L);
      case 81:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 82:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 83:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000610L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0xc00000000000L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 89:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1180000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xe200000000001L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010000000000000L, active1, 0x2L);
      case 108:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 114:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000610L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0xc00000000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x4080L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2c00000000000L);
      case 69:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000600L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x44000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc200000000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L);
      case 88:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         break;
      case 89:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x4080L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2c00000000000L);
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000600L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x44000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc200000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L);
      case 120:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         break;
      case 121:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x21002000000000L);
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x10L);
      case 77:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000600L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8200000000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc00000000000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x21002000000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x10L);
      case 109:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000600L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8200000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc00000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x8080000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc00000000000L);
      case 76:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4200000000000L);
      case 78:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L);
      case 82:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0x1000000000010L);
      case 87:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 89:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
         }
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x8080000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc00000000000L);
      case 108:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4200000000000L);
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0x1000000000010L);
      case 119:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 121:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x10L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 82:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc00000000000L);
      case 88:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 10;
         }
         break;
      case 89:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 10;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x10L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 114:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc00000000000L);
      case 120:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 10;
         }
         break;
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0xc00000000000L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000L);
      case 80:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0xc00000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000L);
      case 112:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 72:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 12;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00000000000L);
      case 82:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 12;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 12;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00000000000L);
      case 114:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 12;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc00000000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc00000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc00000000000L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc00000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 15;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc00000000000L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 15;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc00000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa17_0(active1, 0xc00000000000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0xc00000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa18_0(active1, 0xc00000000000L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active1, 0xc00000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa19_0(active1, 0x800000000000L);
      case 86:
         return jjMoveStringLiteralDfa19_0(active1, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active1, 0x800000000000L);
      case 118:
         return jjMoveStringLiteralDfa19_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa20_0(active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa20_0(active1, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa21_0(active1, 0x400000000000L);
      case 76:
         return jjMoveStringLiteralDfa21_0(active1, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active1, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa22_0(active1, 0x800000000000L);
      case 87:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 21;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa22_0(active1, 0x800000000000L);
      case 119:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 21;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 21);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa23_0(active1, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 22);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 22);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa24_0(active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 23);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 23);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa25_0(active1, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 24);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 24);
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 25;
         }
         break;
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 25;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 25);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 66;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(58, 60); }
                  else if (curChar == 47)
                     { jjAddStates(3, 5); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 40)
                     { jjCheckNAdd(11); }
                  if (curChar == 60)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(41, 42); }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if ((0x7000000000000000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 10:
                  if (curChar == 40)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 13:
                  if (curChar == 45)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 16:
                  if (curChar == 41 && kind > 131)
                     kind = 131;
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 62 && kind > 134)
                     kind = 134;
                  break;
               case 19:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 62 && kind > 136)
                     kind = 136;
                  break;
               case 21:
                  if (curChar == 47)
                     { jjAddStates(3, 5); }
                  break;
               case 22:
                  if (curChar == 47)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 24:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 25:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 28:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar == 42)
                     { jjAddStates(18, 19); }
                  break;
               case 30:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(31, 29); }
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(31, 29); }
                  break;
               case 32:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 33:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(34); }
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 38:
                  if (curChar == 46)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(39); }
                  break;
               case 40:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 41:
                  if (curChar == 61 && kind > 32)
                     kind = 32;
                  break;
               case 42:
                  if (curChar == 61 && kind > 34)
                     kind = 34;
                  break;
               case 43:
                  if (curChar == 60)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 44:
                  if (curChar == 61 && kind > 33)
                     kind = 33;
                  break;
               case 45:
                  if (curChar == 45 && kind > 135)
                     kind = 135;
                  break;
               case 47:
                  if (curChar != 45)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 49:
                  if (curChar != 45)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 51:
                  if (curChar == 46)
                     { jjAddStates(23, 24); }
                  break;
               case 53:
                  if (curChar != 45)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 57:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(58, 60); }
                  break;
               case 58:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 34 && kind > 132)
                     kind = 132;
                  break;
               case 60:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if (curChar == 34)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 63:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     { jjCheckNAddStates(28, 32); }
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 129)
                        kind = 129;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 3:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 7:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 15:
                  if (curChar == 126)
                     { jjCheckNAdd(11); }
                  break;
               case 23:
                  { jjAddStates(15, 17); }
                  break;
               case 28:
                  { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
               case 31:
                  { jjCheckNAddTwoStates(31, 29); }
                  break;
               case 34:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddStates(28, 32); }
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 52:
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 55:
                  if (curChar != 126)
                     break;
                  if (kind > 130)
                     kind = 130;
                  { jjCheckNAdd(51); }
                  break;
               case 56:
                  if (curChar != 126)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAdd(51); }
                  break;
               case 58:
                  { jjAddStates(33, 34); }
                  break;
               case 62:
                  { jjAddStates(35, 36); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(15, 17); }
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(31, 29); }
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(33, 34); }
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(35, 36); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 66 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\53", 
"\41", "\73", "\72", "\75", "\76", "\74", "\50", "\162\145\164\165\162\156", "\51", 
"\56", "\54", null, "\42", "\133", "\135", "\173", "\175", "\100", "\151\156", null, 
null, null, "\55", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\44", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\137", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   36, 37, 38, 22, 27, 33, 44, 42, 45, 12, 15, 16, 13, 14, 11, 23, 
   24, 26, 30, 32, 49, 50, 51, 52, 55, 51, 53, 54, 47, 48, 49, 50, 
   51, 58, 59, 62, 63, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 10)
       {
          jjmatchedKind = 10;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AdilTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AdilTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 66; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0xefffffffffffffffL, 0x1ffL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[66];
    private final int[] jjstateSet = new int[2 * 66];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
