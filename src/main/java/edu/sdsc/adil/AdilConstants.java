/* Generated By:JJTree&JavaCC: Do not edit this line. AdilConstants.java */
package edu.sdsc.adil;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AdilConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 6;
  /** RegularExpression Id. */
  int DIGITS = 11;
  /** RegularExpression Id. */
  int PLUS = 12;
  /** RegularExpression Id. */
  int NOT = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int COLON = 15;
  /** RegularExpression Id. */
  int EQAL = 16;
  /** RegularExpression Id. */
  int GREATER = 17;
  /** RegularExpression Id. */
  int LESS = 18;
  /** RegularExpression Id. */
  int FBRACKETSTART = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int FBRACKETEND = 21;
  /** RegularExpression Id. */
  int DOT = 22;
  /** RegularExpression Id. */
  int COMMA = 23;
  /** RegularExpression Id. */
  int DOUBLES = 24;
  /** RegularExpression Id. */
  int QUOTE = 25;
  /** RegularExpression Id. */
  int StartSQBracket = 26;
  /** RegularExpression Id. */
  int EndSQBracket = 27;
  /** RegularExpression Id. */
  int StartCurlyBracket = 28;
  /** RegularExpression Id. */
  int EndCurlyBracket = 29;
  /** RegularExpression Id. */
  int AT = 30;
  /** RegularExpression Id. */
  int IN = 31;
  /** RegularExpression Id. */
  int GREATERTHANEQUALS = 32;
  /** RegularExpression Id. */
  int MINORTHANEQUALS = 33;
  /** RegularExpression Id. */
  int OPERATOR = 34;
  /** RegularExpression Id. */
  int MINUS = 35;
  /** RegularExpression Id. */
  int CREATE = 36;
  /** RegularExpression Id. */
  int DELETE = 37;
  /** RegularExpression Id. */
  int POLYSTORE = 38;
  /** RegularExpression Id. */
  int ALTER = 39;
  /** RegularExpression Id. */
  int LOAD = 40;
  /** RegularExpression Id. */
  int IMPORT = 41;
  /** RegularExpression Id. */
  int DATASOURCE = 42;
  /** RegularExpression Id. */
  int WITH = 43;
  /** RegularExpression Id. */
  int TRUEEX = 44;
  /** RegularExpression Id. */
  int FALSEEX = 45;
  /** RegularExpression Id. */
  int TRUEORFALSE = 46;
  /** RegularExpression Id. */
  int WHERE = 47;
  /** RegularExpression Id. */
  int AND = 48;
  /** RegularExpression Id. */
  int OR = 49;
  /** RegularExpression Id. */
  int STORE = 50;
  /** RegularExpression Id. */
  int TYPE = 51;
  /** RegularExpression Id. */
  int PARTITION = 52;
  /** RegularExpression Id. */
  int BY = 53;
  /** RegularExpression Id. */
  int AS = 54;
  /** RegularExpression Id. */
  int TEMPORALRELATION = 55;
  /** RegularExpression Id. */
  int TEMPORALGRAPH = 56;
  /** RegularExpression Id. */
  int ON = 57;
  /** RegularExpression Id. */
  int REPORT = 58;
  /** RegularExpression Id. */
  int DBNAME = 59;
  /** RegularExpression Id. */
  int TABLENAME = 60;
  /** RegularExpression Id. */
  int COLNAME = 61;
  /** RegularExpression Id. */
  int INDEX = 62;
  /** RegularExpression Id. */
  int COLINDEX = 63;
  /** RegularExpression Id. */
  int ROWINDEX = 64;
  /** RegularExpression Id. */
  int ANALYSIS = 65;
  /** RegularExpression Id. */
  int EXECUTE = 66;
  /** RegularExpression Id. */
  int EVERY = 67;
  /** RegularExpression Id. */
  int PROPERTYGRAPH = 68;
  /** RegularExpression Id. */
  int MATRIX = 69;
  /** RegularExpression Id. */
  int LONG = 70;
  /** RegularExpression Id. */
  int HISTOGRAM = 71;
  /** RegularExpression Id. */
  int VIEW = 72;
  /** RegularExpression Id. */
  int COLLECTION = 73;
  /** RegularExpression Id. */
  int CONNECTION = 74;
  /** RegularExpression Id. */
  int TO = 75;
  /** RegularExpression Id. */
  int FROM = 76;
  /** RegularExpression Id. */
  int LIBRARY = 77;
  /** RegularExpression Id. */
  int DICTIONARY = 78;
  /** RegularExpression Id. */
  int ONTOLOGY = 79;
  /** RegularExpression Id. */
  int WITNESS = 80;
  /** RegularExpression Id. */
  int PROJECT = 81;
  /** RegularExpression Id. */
  int AWSM = 82;
  /** RegularExpression Id. */
  int NODE = 83;
  /** RegularExpression Id. */
  int NODES = 84;
  /** RegularExpression Id. */
  int PATH = 85;
  /** RegularExpression Id. */
  int SELECT = 86;
  /** RegularExpression Id. */
  int ORDER = 87;
  /** RegularExpression Id. */
  int GROUP = 88;
  /** RegularExpression Id. */
  int USE = 89;
  /** RegularExpression Id. */
  int RELATION = 90;
  /** RegularExpression Id. */
  int TUPLE = 91;
  /** RegularExpression Id. */
  int ROW = 92;
  /** RegularExpression Id. */
  int COLUMN = 93;
  /** RegularExpression Id. */
  int CSV = 94;
  /** RegularExpression Id. */
  int GRAPHQL = 95;
  /** RegularExpression Id. */
  int JSON = 96;
  /** RegularExpression Id. */
  int XML = 97;
  /** RegularExpression Id. */
  int SCHEMA = 98;
  /** RegularExpression Id. */
  int NULL = 99;
  /** RegularExpression Id. */
  int LIST = 100;
  /** RegularExpression Id. */
  int CREATEVIEW = 101;
  /** RegularExpression Id. */
  int MATCH = 102;
  /** RegularExpression Id. */
  int MERGE = 103;
  /** RegularExpression Id. */
  int DOLLAR = 104;
  /** RegularExpression Id. */
  int SET = 105;
  /** RegularExpression Id. */
  int ENV = 106;
  /** RegularExpression Id. */
  int ANNOTATE = 107;
  /** RegularExpression Id. */
  int FILTER = 108;
  /** RegularExpression Id. */
  int EXECUTESQLPP = 109;
  /** RegularExpression Id. */
  int CONSTRUCTGRAPHFROMVIEW = 110;
  /** RegularExpression Id. */
  int CONSTRUCTGRAPHFROMRELATION = 111;
  /** RegularExpression Id. */
  int CYPHERQUERY = 112;
  /** RegularExpression Id. */
  int EXECUTECYPHER = 113;
  /** RegularExpression Id. */
  int EXECUTESOLR = 114;
  /** RegularExpression Id. */
  int EXECUTESQL = 115;
  /** RegularExpression Id. */
  int AwsmSQL = 116;
  /** RegularExpression Id. */
  int AwsmCypher = 117;
  /** RegularExpression Id. */
  int FORALL = 118;
  /** RegularExpression Id. */
  int MAP = 119;
  /** RegularExpression Id. */
  int REDUCE = 120;
  /** RegularExpression Id. */
  int PLACEHOLDER = 121;
  /** RegularExpression Id. */
  int RANGE = 122;
  /** RegularExpression Id. */
  int DIGIT = 123;
  /** RegularExpression Id. */
  int LETTER = 124;
  /** RegularExpression Id. */
  int DATE = 125;
  /** RegularExpression Id. */
  int INT = 126;
  /** RegularExpression Id. */
  int STRING = 127;
  /** RegularExpression Id. */
  int TEXT = 128;
  /** RegularExpression Id. */
  int ALPHANUM = 129;
  /** RegularExpression Id. */
  int FIELDNAME = 130;
  /** RegularExpression Id. */
  int UNQUOTED_IDENTIFIER = 131;
  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 132;
  /** RegularExpression Id. */
  int TRIPLE_QUOTED = 133;
  /** RegularExpression Id. */
  int INPATH = 134;
  /** RegularExpression Id. */
  int OUTPATH = 135;
  /** RegularExpression Id. */
  int MAPTO = 136;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 4>",
    "<token of kind 5>",
    "<WHITESPACE>",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "<DIGITS>",
    "\"+\"",
    "\"!\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"(\"",
    "\"return\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "<DOUBLES>",
    "\"\\\"\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "\"in\"",
    "<GREATERTHANEQUALS>",
    "<MINORTHANEQUALS>",
    "<OPERATOR>",
    "\"-\"",
    "\"create\"",
    "\"delete\"",
    "\"polystore\"",
    "\"alter\"",
    "\"load\"",
    "\"import\"",
    "\"datasource\"",
    "\"with\"",
    "\"true\"",
    "\"false\"",
    "<TRUEORFALSE>",
    "\"where\"",
    "\"and\"",
    "\"or\"",
    "\"store\"",
    "\"type\"",
    "\"partition\"",
    "\"by\"",
    "\"as\"",
    "\"temporalrelation\"",
    "\"temporalgraph\"",
    "\"on\"",
    "\"report\"",
    "\"dbName\"",
    "\"tableName\"",
    "\"columnName\"",
    "\"index\"",
    "\"columnIndex\"",
    "\"rowIndex\"",
    "\"analysis\"",
    "\"execute\"",
    "\"every\"",
    "\"propertygraph\"",
    "\"matrix\"",
    "\"long\"",
    "\"histogram\"",
    "\"view\"",
    "\"collection\"",
    "\"connection\"",
    "\"to\"",
    "\"from\"",
    "\"library\"",
    "\"dictionary\"",
    "\"ontology\"",
    "\"witness\"",
    "\"project\"",
    "\"awsm\"",
    "\"node\"",
    "\"nodes\"",
    "\"path\"",
    "\"select\"",
    "\"order\"",
    "\"group\"",
    "\"use\"",
    "\"relation\"",
    "\"tuple\"",
    "\"row\"",
    "\"col\"",
    "\"csv\"",
    "\"graphql\"",
    "\"json\"",
    "\"xml\"",
    "\"schema\"",
    "\"null\"",
    "\"list\"",
    "\"createview\"",
    "\"match\"",
    "\"merge\"",
    "\"$\"",
    "\"set\"",
    "\"env\"",
    "\"annotate\"",
    "\"filter\"",
    "\"executesqlpp\"",
    "\"constructgraphfromview\"",
    "\"ConstructGraphFromRelation\"",
    "\"cypherquery\"",
    "\"executecypher\"",
    "\"executesolr\"",
    "\"executesql\"",
    "\"AwsmSQL\"",
    "\"AwsmCypher\"",
    "\"for\"",
    "\"#map\"",
    "\"#reduce\"",
    "\"_\"",
    "\"range\"",
    "<DIGIT>",
    "<LETTER>",
    "\"date\"",
    "\"integer\"",
    "\"string\"",
    "\"text\"",
    "<ALPHANUM>",
    "<FIELDNAME>",
    "<UNQUOTED_IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<TRIPLE_QUOTED>",
    "<INPATH>",
    "<OUTPATH>",
    "<MAPTO>",
  };

}
