/* Adil.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Adil.java */
package edu.sdsc.adil;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;


import javax.json.*;
import edu.sdsc.datatype.parser.AwsmDataType;
import edu.sdsc.datatype.parser.FuncInput;
import edu.sdsc.utils.*;
import edu.sdsc.variables.logicalvariables.*;

import static edu.sdsc.utils.JsonUtil.jsonArrayToJsonSetArray;
import static edu.sdsc.utils.ParserUtil.ImportLibraryDBCheck;
import static edu.sdsc.utils.ParserUtil.getCypherObjectType;
import static edu.sdsc.variables.logicalvariables.VariableTable.createVariableEntry;



public class Adil/*@bgen(jjtree)*/implements AdilTreeConstants, AdilConstants {/*@bgen(jjtree)*/
    protected JJTAdilState jjtree = new JJTAdilState();
    private static Integer planID = edu.sdsc.utils.ParserUtil.generateUniqueID();

    private JsonObjectBuilder variableTable = Json.createObjectBuilder();
    private JsonObjectBuilder error = Json.createObjectBuilder();
    private JsonObjectBuilder decision = Json.createObjectBuilder();
    private JsonObjectBuilder schema = Json.createObjectBuilder();
    private JsonObjectBuilder Terminals = Json.createObjectBuilder();
    private JsonObject config;
    private VariableTable vtable =  new VariableTable();
    private JsonObjectBuilder type = Json.createObjectBuilder();
    private Integer variableID = 0;
    private Integer blockID = 0;
    private ArrayList dbLists =  new ArrayList<String>();

    public VariableTable getVariableTable (){
        return vtable ;
    }
    public Integer getVariableID() {return variableID++;}
    public JsonObject getConfig() {return config;}

    public boolean forallfalg = false;
    String forallvar = null;

    public static void main(String[] args){
        Reader sr = new StringReader(args[0]);
        JsonObjectBuilder js = Json.createObjectBuilder();

        Adil p = new Adil(sr);
        try {
            JsonObjectBuilder node = p.ADILStatement(js);
            System.out.println(node.toString());

        } catch (ParseException pe) {
            pe.printStackTrace();
        }
    }

    final public JsonObjectBuilder ADILStatement(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ADILStatement */
        ASTADILStatement jjtn000 = new ASTADILStatement(JJTADILSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonArrayBuilder array = Json.createArrayBuilder(); JsonObjectBuilder tempJB = Json.createObjectBuilder();
        try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case USE:{
                    JsonObjectBuilder tempjObject = Json.createObjectBuilder();
                    UseClause(tempjObject);
                    jj_consume_token(SEMICOLON);
                    jObject.add("Use", tempjObject.build());
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            array = CreateAnalysis();
            jj_consume_token(SEMICOLON);
            jObject.add("UnitAnalysis", array.build());
            tempJB.add("Variable", variableTable.build());
            tempJB.add("error", error.build());
            tempJB.add("schema", schema.build());
            tempJB.add("Terminals", Terminals.build());
            tempJB.add("decision", decision.build());
            jObject.add("INFO", tempJB.build());
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jObject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder Statement(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) Statement */
        ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        try {
            if (jj_2_1(2)) {
                CreateAnalysis();
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case IMPORT:{
                        ImportLibrary(jObject);
                        break;
                    }
                    case USE:{
                        UseClause(jObject);
                        break;
                    }
                    default:
                        jj_la1[1] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jObject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // USE Database Syntax
    final public

    JsonObjectBuilder UseClause(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) UseClause */
        ASTUseClause jjtn000 = new ASTUseClause(JJTUSECLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();
        try {
            jj_consume_token(USE);
            t = jj_consume_token(ALPHANUM);
            config = LoadConfig.getConfig(t.image);
            jj_consume_token(AS);
            jj_consume_token(POLYSTORE);
//JsonObjectBuilder dbjObject = Json.createObjectBuilder();

//ImportLibraryDBCheck(dbjObject, z.image, array.build());
            jObject.add("polystore name", t.image);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jObject;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Import Ontologies Dictionaries
    final public JsonObjectBuilder ImportLibrary(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ImportLibrary */
        ASTImportLibrary jjtn000 = new ASTImportLibrary(JJTIMPORTLIBRARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token z; JsonArrayBuilder array = Json.createArrayBuilder(); String ltype; JsonObjectBuilder tempjObject = Json.createObjectBuilder();
        try {
            jj_consume_token(IMPORT);
            if (jj_2_2(2)) {
                jj_consume_token(LIBRARY);
                ltype = "LIBRARY";
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case DICTIONARY:{
                        jj_consume_token(DICTIONARY);
                        ltype = "DICTIONARY";
                        break;
                    }
                    case ONTOLOGY:{
                        t = jj_consume_token(ONTOLOGY);
                        ltype="ONTOLOGY";
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            t = jj_consume_token(ALPHANUM);
            array.add(t.image);
            variableTable.add(t.image, ltype );
            label_1:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        break label_1;
                }
                jj_consume_token(COMMA);
                t = jj_consume_token(ALPHANUM);
                array.add(t.image); variableTable.add(t.image,ltype ); Terminals.add(t.image, ltype);
            }
            jj_consume_token(AS);
            z = jj_consume_token(ALPHANUM);
            variableTable.add(z.image, t.image);{tempjObject.add("as", z.image);}
            JsonObjectBuilder dbjObject = Json.createObjectBuilder();
            ImportLibraryDBCheck(dbjObject, z.image, array.build());
            tempjObject.add("System", dbjObject.build());
            tempjObject.add("type", ltype);
            jObject.add("IMPORT", tempjObject.build());
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jObject;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    //Analysis Creation Libraries. Start analysis from here.
    final public JsonArrayBuilder CreateAnalysis() throws ParseException {/*@bgen(jjtree) CreateAnalysis */
        ASTCreateAnalysis jjtn000 = new ASTCreateAnalysis(JJTCREATEANALYSIS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token k; Integer lineNum =0; boolean scheduleFlag = true; JsonArrayBuilder array = Json.createArrayBuilder();
        try {
            jj_consume_token(CREATE);
            jj_consume_token(ANALYSIS);
            k = jj_consume_token(ALPHANUM);
            jj_consume_token(AS);
            jj_consume_token(FBRACKETSTART);
            label_2:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STORE:
                    case REPORT:
                    case ALPHANUM:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_2;
                }
                JsonObjectBuilder tempJB = Json.createObjectBuilder();
                if (jj_2_3(5)) {
                    tempJB.add("blockType", "Store");
                    StoreStatement(tempJB);
                } else if (jj_2_4(10)) {
                    tempJB.add("blockType", "FilterExpression");
                    FilterAssignment(tempJB);
                } else if (jj_2_5(3)) {
                    tempJB.add("blockType", "Report");
                    ReportStatement(tempJB);
                } else if (jj_2_6(10)) {
                    tempJB.add("blockType", "MapExpression");
                    MapExpression(tempJB);
                } else if (jj_2_7(10)) {
                    tempJB.add("blockType", "ReduceExpression");
                    ReduceExpression(tempJB);
                } else if (jj_2_8(20)) {
                    tempJB.add("blockType", "Neo4jQuery");
                    CYPHERPASS(tempJB);
                } else if (jj_2_9(20)) {
                    tempJB.add("blockType", "Solr");
                    SOLRPASS(tempJB);
                } else if (jj_2_10(5)) {
                    tempJB.add("blockType", "ConstructGraphFromRelation");
                    ConstructGraphFromRelationFunc(tempJB);
                } else if (jj_2_11(10)) {
                    AssignmentStatement(tempJB);
                } else if (jj_2_12(10)) {
                    tempJB.add("blockType", "ListCreation");
                    ListCreation(tempJB);
                } else if (jj_2_13(15)) {
                    SQLPASS(tempJB);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                lineNum = lineNum+1;
                jj_consume_token(SEMICOLON);
                array.add(tempJB.build());
            }
            jj_consume_token(FBRACKETEND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case EXECUTE:{
                    jj_consume_token(EXECUTE);
                    jj_consume_token(EVERY);
                    t = jj_consume_token(ALPHANUM);
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return array;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void ReportStatement(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ReportStatement */
        ASTReportStatement jjtn000 = new ASTReportStatement(JJTREPORTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v;
        JsonArrayBuilder tempVar = Json.createArrayBuilder();
        try {
            jj_consume_token(REPORT);
            v = jj_consume_token(ALPHANUM);
            tempVar.add(vtable.searchVariable(v.image).first);
            label_3:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        break label_3;
                }
                jj_consume_token(COMMA);
                v = jj_consume_token(ALPHANUM);
                tempVar.add(vtable.searchVariable(v.image).first);
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("varReturned", tempVar.build());
//return jObject.add("varReturned", tempVar.build()).build();

        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void StoreStatement(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) StoreStatement */
        ASTStoreStatement jjtn000 = new ASTStoreStatement(JJTSTORESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        JsonArrayBuilder colNames = Json.createArrayBuilder();
        JsonObjectBuilder store = Json.createObjectBuilder();
        Integer vID; String typeString;
        Token index;
        try {
            jj_consume_token(STORE);
            jj_consume_token(FBRACKETSTART);
            t = jj_consume_token(ALPHANUM);
            vID = vtable.searchVariable(t.image).first; typeString=vtable.getVarType(vID);
            store.add("varID", vID).add("varName", t.image).add("varType", typeString);
            jj_consume_token(COMMA);
            jj_consume_token(DBNAME);
            jj_consume_token(EQAL);
            t = jj_consume_token(QUOTED_IDENTIFIER);
            store.add("DBName", t.image.substring(1, t.image.length()-1));
            jj_consume_token(COMMA);
            jj_consume_token(TABLENAME);
            jj_consume_token(EQAL);
            t = jj_consume_token(QUOTED_IDENTIFIER);
            store.add("TableName", t.image.substring(1, t.image.length()-1));
            label_4:
            while (true) {
                if (jj_2_14(2)) {
                    ;
                } else {
                    break label_4;
                }
                jj_consume_token(COMMA);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case INDEX:{
                        index = jj_consume_token(INDEX);
                        break;
                    }
                    case COLINDEX:{
                        index = jj_consume_token(COLINDEX);
                        break;
                    }
                    case ROWINDEX:{
                        index = jj_consume_token(ROWINDEX);
                        break;
                    }
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(EQAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case TRUEEX:{
                        t = jj_consume_token(TRUEEX);
                        break;
                    }
                    case FALSEEX:{
                        t = jj_consume_token(FALSEEX);
                        break;
                    }
                    default:
                        jj_la1[8] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                store.add(index.image, t.image);
            }
            jj_consume_token(COMMA);
            jj_consume_token(COLNAME);
            jj_consume_token(EQAL);
            jj_consume_token(StartSQBracket);
            t = jj_consume_token(QUOTED_IDENTIFIER);
            colNames.add(t.image);
            label_5:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[9] = jj_gen;
                        break label_5;
                }
                jj_consume_token(COMMA);
                t = jj_consume_token(QUOTED_IDENTIFIER);
                colNames.add(t.image);
            }
            store.add("colNames", colNames.build());
            jj_consume_token(EndSQBracket);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("storeDetail", store.build());
//return jObject.add("varReturned", tempVar.build()).build();

        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignmentStatement(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) AssignmentStatement */
        ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token or; Token gr; Token store ;
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        boolean variableArray = false;
        JsonArrayBuilder group = Json.createArrayBuilder();
        JsonArrayBuilder order = Json.createArrayBuilder();
        JsonArrayBuilder var = Json.createArrayBuilder();
        JsonObjectBuilder temp = Json.createObjectBuilder();
        List<String> variables = new ArrayList<String>();
        String type;
        String name;
        try {
            t = jj_consume_token(ALPHANUM);
            variables.add(t.image);
            label_6:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_6;
                }
                jj_consume_token(COMMA);
                t = jj_consume_token(ALPHANUM);
                variables.add(t.image);
            }
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            if (jj_2_15(10)) {
                jObject.add( "blockType", "OperationAssign");
                MATHASSIGNMENT(jObject, t.image);
            } else if (jj_2_16(10)) {
                LISTASSIGNMENT(jObject, t.image);
            } else if (jj_2_17(10)) {
                jObject.add("blockType", "TupleExtraction");
                TUPLEEXTRACTION(jObject, t.image);
            } else if (jj_2_18(20)) {
                AWSMFunction(jObject,variables);
            } else if (jj_2_19(10)) {
                MATRIXASSIGNMENT(jObject, t.image);
            } else if (jj_2_20(10)) {
                LITERALASSIGNMENT(jObject, t.image);
            } else if (jj_2_21(10)) {
                jObject.add("blockType", "TupleAssign");
                TUPLEASSIGNMENT(jObject, t.image);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public JsonObjectBuilder ReturnStatement(JsonObjectBuilder jobject) throws ParseException {/*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        try {
            jj_consume_token(RETURN);
            jj_consume_token(AS);
            jj_consume_token(FBRACKETSTART);
            PropertyGraph(tempJB);
            jj_consume_token(FBRACKETEND);
            jobject.add("returnfrom", tempJB.build());
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jobject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder PropertyGraph(JsonObjectBuilder jobject) throws ParseException {/*@bgen(jjtree) PropertyGraph */
        ASTPropertyGraph jjtn000 = new ASTPropertyGraph(JJTPROPERTYGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        JsonArrayBuilder tempArray = Json.createArrayBuilder();
        JsonArrayBuilder tempJA = Json.createArrayBuilder();
        try {
            GRAPHNODE(tempJA);
            tempArray.add(tempJA.build());
            label_7:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MINUS:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[11] = jj_gen;
                        break label_7;
                }
                JsonArrayBuilder tempJB = Json.createArrayBuilder();
                GRAPHEDGE(tempJB);
                tempArray.add(tempJB.build());
                JsonArrayBuilder tempJC = Json.createArrayBuilder();
                GRAPHNODE(tempJC);
                tempArray.add(tempJC.build());
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jobject.add("cypher",tempArray.build());
            {if ("" != null) return jobject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonArrayBuilder GRAPHNODE(JsonArrayBuilder jobject) throws ParseException {/*@bgen(jjtree) GRAPHNODE */
        ASTGRAPHNODE jjtn000 = new ASTGRAPHNODE(JJTGRAPHNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token k;
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        try {
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:
                case FIELDNAME:{
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ALPHANUM:{
                            t = jj_consume_token(ALPHANUM);
                            break;
                        }
                        case FIELDNAME:{
                            t = jj_consume_token(FIELDNAME);
                            tempJB.add("nodeName", t.image);
                            break;
                        }
                        default:
                            jj_la1[12] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
            jj_consume_token(COLON);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:{
                    k = jj_consume_token(ALPHANUM);
                    break;
                }
                case FIELDNAME:{
                    k = jj_consume_token(FIELDNAME);
                    break;
                }
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            tempJB.add("nodeType",k.image);
            jobject.add(tempJB.build());
            {if ("" != null) return jobject;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonArrayBuilder GRAPHEDGE(JsonArrayBuilder jobject) throws ParseException {/*@bgen(jjtree) GRAPHEDGE */
        ASTGRAPHEDGE jjtn000 = new ASTGRAPHEDGE(JJTGRAPHEDGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token k; Token s;
        try {
            JsonObjectBuilder tempJB = Json.createObjectBuilder();
            jj_consume_token(MINUS);
            jj_consume_token(StartSQBracket);
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            s = jj_consume_token(ALPHANUM);
            jj_consume_token(EndSQBracket);
            jj_consume_token(MINUS);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            tempJB.add("edgeName", t.image);
            tempJB.add("edgeType",s.image);
            jobject.add(tempJB.build());
            {if ("" != null) return jobject;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject ConstructGraphFromRelationExpression(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) ConstructGraphFromRelationExpression */
        ASTConstructGraphFromRelationExpression jjtn000 = new ASTConstructGraphFromRelationExpression(JJTCONSTRUCTGRAPHFROMRELATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObject tempLeftNode = Json.createObjectBuilder().build();
        JsonObject tempRightNode = Json.createObjectBuilder().build();
        JsonObject tempEdge;
        JsonObjectBuilder relationUsed = Json.createObjectBuilder();
        JsonObjectBuilder schema = Json.createObjectBuilder(); JsonObject leftnode; JsonObject rightnode; JsonObject edge;
        JsonObjectBuilder rhs = Json.createObjectBuilder(); String[] key ={"name", "type"};
        JsonArray nodeLabel = Json.createArrayBuilder().build(); JsonArray edgeLabel = Json.createArrayBuilder().build();
        JsonArray nodeProp = Json.createArrayBuilder().build(); JsonArray edgeProp = Json.createArrayBuilder().build();
        Token t;Token v; String left; String right; String sourceNode; String tgtNode; Token r; String vType;
        Token node1; Token node2; boolean hasLeftArrow = false; boolean hasRightArrow = false;
        try {
            jj_consume_token(CONSTRUCTGRAPHFROMRELATION);
            jj_consume_token(FBRACKETSTART);
            r = jj_consume_token(ALPHANUM);
            Pair<Integer, Integer> vIDbID = vtable.searchVariable(r.image, block);
            Integer vID = vIDbID.first;  Integer bID = vIDbID.second;
            vType = vtable.getVarType(vID);
            if (!vType.equals("Relation")) {{if (true) throw new IllegalArgumentException("ConstructGraphFromRelation accepts a relation variable");}}
            relationUsed.add("varID", vID).add("varName", r.image);
            if (bID != -1) {relationUsed.add("localVariable", "true").add("blockID", bID);}
            jj_consume_token(COMMA);
            jj_consume_token(FBRACKETSTART);
            leftnode = createProperty(r.image, block);
            jj_consume_token(FBRACKETEND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OUTPATH:{
                    jj_consume_token(OUTPATH);
                    hasLeftArrow=true;
                    break;
                }
                case MINUS:{
                    jj_consume_token(MINUS);
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(StartSQBracket);
            edge = createProperty(r.image, block);
            rhs.add("edge", edge);
            jj_consume_token(EndSQBracket);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MINUS:{
                    jj_consume_token(MINUS);
                    break;
                }
                case INPATH:{
                    jj_consume_token(INPATH);
                    hasRightArrow = true;
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(FBRACKETSTART);
            rightnode = createProperty(r.image, block);
            jj_consume_token(FBRACKETEND);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            nodeLabel = ParserUtil.concatArray(nodeLabel, leftnode.getJsonArray("label"));
            nodeLabel = ParserUtil.concatArray(nodeLabel, rightnode.getJsonArray("label"));
            nodeProp = ParserUtil.concatArray(nodeProp, ParserUtil.extractObject(leftnode.getJsonArray("property"),key));
            nodeProp = ParserUtil.concatArray(nodeProp, ParserUtil.extractObject(rightnode.getJsonArray("property"),key));
            edgeLabel = edge.getJsonArray("label");
            edgeProp = ParserUtil.extractObject(edge.getJsonArray("property"),key);
            schema.add("nodeLabel", jsonArrayToJsonSetArray(nodeLabel)).add("nodeProperty", nodeProp).add("edgeLabel", jsonArrayToJsonSetArray(edgeLabel)).add("edgeProperty", edgeProp);

            if (hasRightArrow && !hasLeftArrow) {rhs.add("source", leftnode).add("target", rightnode).add("hasDirection", true);}
            else if (!hasRightArrow && hasLeftArrow)  {rhs.add("source", rightnode).add("target", leftnode).add("hasDirection", true); }
            else if (!hasRightArrow) {rhs.add("source", leftnode).add("target", rightnode).add("hasDirection", false); }
            else {{if (true) throw new IllegalArgumentException("edge expression is wrong. Hint: can't have arrows on both sides");}}
//rhs.add("variable", edge.getJsonObject("varUsed"));
            rhs.add("relationUsed", relationUsed.build());
            jObject.add("RHS", rhs.build());
            JsonObject schemaDetail = schema.build();
            jObject.add("schema", schemaDetail).add("blockType", "ConstructGraphFromRelation");
            {if ("" != null) return schemaDetail;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // construct graph from relation
//todo: finish this for localVar
    final public void ConstructGraphFromRelationFunc(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ConstructGraphFromRelationFunc */
        ASTConstructGraphFromRelationFunc jjtn000 = new ASTConstructGraphFromRelationFunc(JJTCONSTRUCTGRAPHFROMRELATIONFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObject tempLeftNode = Json.createObjectBuilder().build();
        JsonObject tempRightNode = Json.createObjectBuilder().build();
        JsonObject tempEdge;JsonObject schema;
        JsonObjectBuilder relationUsed = Json.createObjectBuilder();
        JsonObjectBuilder innerExpression = Json.createObjectBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder(); JsonObject leftnode; JsonObject rightnode; JsonObject edge;
        JsonObjectBuilder rhs = Json.createObjectBuilder(); String[] key ={"name", "type"};
        JsonArray nodeLabel; JsonArray edgeLabel;
        JsonArray nodeProp; JsonArray edgeProp;
        Token t;Token v; Token r; String left; String right; String sourceNode; String tgtNode;
        JsonObjectBuilder temp;
        Token node1; Token node2; boolean hasLeftArrow = false; boolean hasRightArrow = false; String vType;
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varName", t.image).add("varID", variableID);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            schema = ConstructGraphFromRelationExpression(jObject);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            PGTableEntry pte = new PGTableEntry(t.image, schema.getJsonArray("nodeLabel"), schema.getJsonArray("nodeProperty"), schema.getJsonArray("edgeLabel"), schema.getJsonArray("edgeProperty"));
            vtable.insertEntry(variableID, pte);
            variableID = variableID +1;
            jObject.add("LHS", lhs.build());
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // Construct Graph (delete constructgraph)
    final public JsonObjectBuilder ConstructGraph(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ConstructTinkerpopGraph */
        ASTConstructGraph jjtn000 = new ASTConstructGraph(JJTCONSTRUCTGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder tempJA = Json.createObjectBuilder();
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        JsonArrayBuilder tempAarray = Json.createArrayBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        Token t;Token v;
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varName", t.image); lhs.add("varID", variableID);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            jj_consume_token(CONSTRUCTGRAPHFROMVIEW);
            jj_consume_token(StartCurlyBracket);
            label_8:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ALPHANUM:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[17] = jj_gen;
                        break label_8;
                }
                if (jj_2_22(10)) {
                    SQLPASS(tempJB);
                } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ALPHANUM:{
                            AssignmentStatement(tempJB);
                            break;
                        }
                        default:
                            jj_la1[18] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(SEMICOLON);
                tempAarray.add(tempJB.build());
            }
            jj_consume_token(VIEW);
            v = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            lhs.add("viewName",v.image);
            jj_consume_token(FBRACKETSTART);
            CreateViewStatement(tempJB, blockID);
            jj_consume_token(FBRACKETEND);
            jj_consume_token(SEMICOLON);
            jj_consume_token(EndCurlyBracket);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            JsonArray innerVar = tempAarray.build();
            if (innerVar.size() > 0) {
                rhs.add("tempVariables", innerVar);
            }
            JsonObject tempObj = tempJB.build();
            rhs.add("view-construction", tempObj.getJsonObject("RHS"));
            JsonArray nodeLabel = jsonArrayToJsonSetArray(tempObj.getJsonArray("nodeLabel"));
            JsonArray edgeLabel = jsonArrayToJsonSetArray(tempObj.getJsonArray("edgeLabel"));
            JsonArray nodeProp = tempObj.getJsonArray("nodeProperty");
            JsonArray edgeProp = tempObj.getJsonArray("edgeProperty");
            lhs.add("nodeLabel", nodeLabel).add("nodeProperty", nodeProp).add("edgeLabel", edgeLabel).add("edgeProperty", edgeProp);
            PGTableEntry pte = new PGTableEntry(t.image, nodeLabel, nodeProp, edgeLabel, edgeProp);
            vtable.insertEntry(variableID, pte);
            variableID = variableID +1;
            blockID = blockID +1;
            jObject.add("LHS", lhs).add("RHS", rhs);
            {if ("" != null) return jObject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonArray propertyConstraint(JsonArray label, JsonArray property,  Integer id) throws ParseException {/*@bgen(jjtree) propertyConstraint */
        ASTpropertyConstraint jjtn000 = new ASTpropertyConstraint(JJTPROPERTYCONSTRAINT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token v; String consType;  JsonArrayBuilder prop; JsonArrayBuilder cons = Json.createArrayBuilder();JsonObjectBuilder tempJB;
        try {
            ArrayList<String> labelList = ParserUtil.jsonArrayToStringList(label);
            ArrayList<String> propList = ParserUtil.jsonArrayToStringList(ParserUtil.extractKey(property, "name"));
            label_9:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COLON:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[19] = jj_gen;
                        break label_9;
                }
                jj_consume_token(COLON);
                t = jj_consume_token(ALPHANUM);
                if(labelList.contains(t.image)){tempJB = Json.createObjectBuilder().add("id", id).add("lhs", t.image).add("type","nodeLabel");cons.add(tempJB.build());}
                else{{if (true) throw new IllegalArgumentException(t.image + ": no such label");}}
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case StartCurlyBracket:{
                    jj_consume_token(StartCurlyBracket);
                    t = jj_consume_token(ALPHANUM);
                    jj_consume_token(COLON);
                    jj_consume_token(DOLLAR);
                    v = jj_consume_token(FIELDNAME);
                    if (!propList.contains(t.image)){{if (true) throw new IllegalArgumentException(t.image + ": no such property");}}
                    tempJB = Json.createObjectBuilder().add("id", id).add("lhs", t.image).add("operation", "=").add("rhs", v.image);
                    cons.add(tempJB.build());
                    label_10:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[20] = jj_gen;
                                break label_10;
                        }
                        jj_consume_token(COMMA);
                        t = jj_consume_token(ALPHANUM);
                        jj_consume_token(COLON);
                        jj_consume_token(DOLLAR);
                        v = jj_consume_token(FIELDNAME);
                        if (!propList.contains(t.image)){{if (true) throw new IllegalArgumentException(t.image + ": no such property");}}
                        tempJB = Json.createObjectBuilder().add("id", id).add("lhs", t.image).add("operation", "=").add("rhs", v.image);cons.add(tempJB.build());
                    }
                    jj_consume_token(EndCurlyBracket);
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return cons.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject NodeExpressionConstraint(JsonArray label, JsonArray property,   Integer nodeID) throws ParseException {/*@bgen(jjtree) NodeExpressionConstraint */
        ASTNodeExpressionConstraint jjtn000 = new ASTNodeExpressionConstraint(JJTNODEEXPRESSIONCONSTRAINT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder l = Json.createObjectBuilder(); JsonObjectBuilder node = Json.createObjectBuilder(); Token t; JsonArray constraints = null;JsonArray tempCons;
        try {
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    node.add("alias", t.image);
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    ;
            }
            node.add("nodeID", nodeID);
            constraints = propertyConstraint(label,property, nodeID);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("node", node.build());
            l.add("constraints", constraints);
            {if ("" != null) return l.build();}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // todo: add literal variable
//| (<DOLLAR> v = <ALPHANUM> {})
    final public JsonObject createProperty(String relation, Integer... block) throws ParseException {/*@bgen(jjtree) createProperty */
        ASTcreateProperty jjtn000 = new ASTcreateProperty(JJTCREATEPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token name; Token t; Token v;String[] v1; String var; String rhs; String consType;
        JsonArrayBuilder label = Json.createArrayBuilder();
        JsonArrayBuilder prop = Json.createArrayBuilder();
        JsonObjectBuilder tempJB;
        JsonObjectBuilder tempVar = Json.createObjectBuilder();
        JsonObjectBuilder l = Json.createObjectBuilder();
        try {
            label_11:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COLON:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[23] = jj_gen;
                        break label_11;
                }
                jj_consume_token(COLON);
                t = jj_consume_token(ALPHANUM);
                label.add(t.image);
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case StartCurlyBracket:{
                    jj_consume_token(StartCurlyBracket);
                    t = jj_consume_token(ALPHANUM);
                    jj_consume_token(COLON);
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case DIGITS:{
                            v = jj_consume_token(DIGITS);
                            tempJB = Json.createObjectBuilder().add("name", t.image).add("value", v.image).add("type", "int");
                            break;
                        }
                        case QUOTED_IDENTIFIER:{
                            v = jj_consume_token(QUOTED_IDENTIFIER);
                            tempJB = Json.createObjectBuilder().add("name", t.image).add("value", v.image).add("type", "string");
                            break;
                        }
                        case DOLLAR:{
                            jj_consume_token(DOLLAR);
                            v = jj_consume_token(FIELDNAME);
                            v1 = v.image.split("\u005c\u005c."); var = v1[0];
                            if (!var.equals(relation)) {{if (true) throw new IllegalArgumentException("Only construct graph from " + relation);}}
                            tempJB = Json.createObjectBuilder().add("name", t.image).add("colName", v.image);
                            if (block.length == 0) {consType = SQLParseUtil.getSchema(vtable, v1[0], v1[1]);
                                tempJB.add("type", consType);}
                            else {tempJB.add("type", "Undecided");}
                            prop.add(tempJB.build());
                            break;
                        }
                        default:
                            jj_la1[24] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    label_12:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[25] = jj_gen;
                                break label_12;
                        }
                        jj_consume_token(COMMA);
                        t = jj_consume_token(ALPHANUM);
                        jj_consume_token(COLON);
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case DIGITS:{
                                v = jj_consume_token(DIGITS);
                                tempJB = Json.createObjectBuilder().add("name", t.image).add("value", v.image).add("type", "int");
                                break;
                            }
                            case QUOTED_IDENTIFIER:{
                                v = jj_consume_token(QUOTED_IDENTIFIER);
                                tempJB = Json.createObjectBuilder().add("name", t.image).add("value", v.image).add("type", "string");
                                break;
                            }
                            case DOLLAR:{
                                jj_consume_token(DOLLAR);
                                v = jj_consume_token(FIELDNAME);
                                v1 = v.image.split("\u005c\u005c."); var = v1[0];
                                if (!var.equals(relation)) {{if (true) throw new IllegalArgumentException("Only construct graph from " + relation);}}
                                tempJB = Json.createObjectBuilder().add("name", t.image).add("colName", v.image);
                                if (block.length == 1) {consType = SQLParseUtil.getSchema(vtable, v1[0], v1[1], block[0]);
                                    tempJB.add("type", consType);}
                                prop.add(tempJB.build());
                                break;
                            }
                            default:
                                jj_la1[26] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    jj_consume_token(EndCurlyBracket);
                    break;
                }
                default:
                    jj_la1[27] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//l.add("varUsed", tempVar.build());
            l.add("label", label.build());
            l.add("property", prop.build());
            {if ("" != null) return l.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject CreateSetStatement() throws ParseException {/*@bgen(jjtree) CreateSetStatement */
        ASTCreateSetStatement jjtn000 = new ASTCreateSetStatement(JJTCREATESETSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder l = Json.createObjectBuilder();String consType; Token r;JsonObjectBuilder temp = Json.createObjectBuilder(); JsonArrayBuilder prop = null;Token v;String[] v1;Token v2; Token t;
        try {
            jj_consume_token(ON);
            jj_consume_token(CREATE);
            jj_consume_token(SET);
            t = jj_consume_token(ALPHANUM);
            l.add("varName", t.image);
            jj_consume_token(DOT);
            v = jj_consume_token(ALPHANUM);
            jj_consume_token(EQAL);
            jj_consume_token(DOLLAR);
            r = jj_consume_token(FIELDNAME);
            v1 = r.image.split("\u005c\u005c."); consType = SQLParseUtil.getSchema(vtable, v1[0], v1[1]);
            temp = Json.createObjectBuilder().add("name", v.image).add("type", consType).add("rhs", r.image);prop.add(temp.build());
            jj_consume_token(COMMA);
            jj_consume_token(ALPHANUM);
            jj_consume_token(DOT);
            v = jj_consume_token(ALPHANUM);
            jj_consume_token(EQAL);
            jj_consume_token(DOLLAR);
            r = jj_consume_token(FIELDNAME);
            v1 = r.image.split("\u005c\u005c."); consType = SQLParseUtil.getSchema(vtable, v1[0], v1[1]);
            temp = Json.createObjectBuilder().add("name", v.image).add("type", consType).add("rhs", r.image);prop.add(temp.build());
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("property", prop.build());
            {if ("" != null) return l.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // may delete
    final public JsonObject createNodeStatement() throws ParseException {/*@bgen(jjtree) createNodeStatement */
        ASTcreateNodeStatement jjtn000 = new ASTcreateNodeStatement(JJTCREATENODESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder l = Json.createObjectBuilder(); JsonObject node; Token t = null; Token v1; Token v2; JsonObject tempProp; JsonArray nodeProp;JsonObjectBuilder temp = Json.createObjectBuilder();String type;
        try {
            jj_consume_token(MERGE);
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    l.add("name", t.image);
                    break;
                }
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
            node = createProperty("R");
            jj_consume_token(FBRACKETEND);
            nodeProp = node.getJsonArray("property");
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ON:{
                    tempProp = CreateSetStatement();
                    if (tempProp.getString("varName").equals(t.image))
                    {nodeProp = ParserUtil.concatArray(nodeProp, tempProp.getJsonArray("property"));}
                    else{{if (true) throw new IllegalArgumentException();}}
                    break;
                }
                default:
                    jj_la1[29] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("create", "node");
            l.add("varUsed", node.getJsonObject("varUsed"));
            l.add("label", node.getJsonArray("label"));
            l.add("property", nodeProp);
            {if ("" != null) return l.build();}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject createEdgeStatement(JsonArray nodeLabel, JsonArray nodeProp) throws ParseException {/*@bgen(jjtree) createEdgeStatement */
        ASTcreateEdgeStatement jjtn000 = new ASTcreateEdgeStatement(JJTCREATEEDGESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token e = null; Token t;JsonObject node;JsonObjectBuilder edge = Json.createObjectBuilder(); JsonArray constraints;JsonArrayBuilder nodes=Json.createArrayBuilder(); JsonObject temp;JsonObject tempProp;
        Integer nodeID = 0;JsonObjectBuilder l = Json.createObjectBuilder();
        JsonArray edgeLabel; JsonArray edgeProp;
        try {
            label_13:
            while (true) {
                jj_consume_token(MATCH);
                node = NodeExpressionConstraint(nodeLabel, nodeProp, nodeID);
                nodes.add(node);nodeID = nodeID +1;
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MATCH:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[30] = jj_gen;
                        break label_13;
                }
            }
            jj_consume_token(MERGE);
            jj_consume_token(FBRACKETSTART);
            t = jj_consume_token(ALPHANUM);
            edge.add("inNode", t.image);
            jj_consume_token(FBRACKETEND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OUTPATH:{
                    jj_consume_token(OUTPATH);
                    break;
                }
                case MINUS:{
                    jj_consume_token(MINUS);
                    break;
                }
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(StartSQBracket);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:{
                    e = jj_consume_token(ALPHANUM);
                    edge.add("alias", e.image);
                    break;
                }
                default:
                    jj_la1[32] = jj_gen;
                    ;
            }
            temp = createProperty("R");
            edgeLabel = temp.getJsonArray("label");edgeProp = temp.getJsonArray("property");
            jj_consume_token(EndSQBracket);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MINUS:{
                    jj_consume_token(MINUS);
                    break;
                }
                case INPATH:{
                    jj_consume_token(INPATH);
                    break;
                }
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(FBRACKETSTART);
            t = jj_consume_token(ALPHANUM);
            edge.add("outNode", t.image);
            jj_consume_token(FBRACKETEND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ON:{
                    tempProp = CreateSetStatement();
                    if (tempProp.getString("varName").equals(e.image)){ edgeProp = ParserUtil.concatArray(edgeProp, tempProp.getJsonArray("property"));} else{{if (true) throw new IllegalArgumentException();}}
                    break;
                }
                default:
                    jj_la1[34] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("create", "edge");
            l.add("nodesConstraints", nodes.build());
            l.add("edge", edge.build());
            l.add("label", edgeLabel);
            l.add("property", edgeProp);
            {if ("" != null) return l.build();}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder CreateViewStatement(JsonObjectBuilder jObject, Integer blockID) throws ParseException {/*@bgen(jjtree) CreateViewStatement */
        ASTCreateViewStatement jjtn000 = new ASTCreateViewStatement(JJTCREATEVIEWSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonArray nodeLabel = Json.createArrayBuilder().build(); JsonObjectBuilder realRhs = Json.createObjectBuilder();JsonArray edgeLabel = Json.createArrayBuilder().build();JsonArray nodeProp = Json.createArrayBuilder().build();JsonArray edgeProp = Json.createArrayBuilder().build();
        JsonArrayBuilder nodes = Json.createArrayBuilder(); JsonArrayBuilder edges = Json.createArrayBuilder();JsonArrayBuilder rhs = Json.createArrayBuilder();
        JsonObject temp; JsonObject varUsed =Json.createObjectBuilder().build();String[] key ={"name", "type"};
        try {
            label_14:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MATCH:
                    case MERGE:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[35] = jj_gen;
                        break label_14;
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MERGE:{
                        temp = createNodeStatement();
                        rhs.add(temp);nodeLabel = ParserUtil.concatArray(nodeLabel, temp.getJsonArray("label"));nodeProp = ParserUtil.concatArray(nodeProp, ParserUtil.extractObject(temp.getJsonArray("property"),key));varUsed = temp.getJsonObject("varUsed");
                        break;
                    }
                    case MATCH:{
                        temp = createEdgeStatement(nodeLabel, nodeProp);
                        rhs.add(temp);edgeLabel = ParserUtil.concatArray(edgeLabel, temp.getJsonArray("label"));edgeProp = ParserUtil.concatArray(edgeProp, ParserUtil.extractObject(temp.getJsonArray("property"),key));
                        break;
                    }
                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("nodeLabel", nodeLabel);
            jObject.add("nodeProperty", nodeProp);
            jObject.add("edgeLabel", edgeLabel);
            jObject.add("edgeProperty", edgeProp);
            realRhs.add("construction", rhs);
            realRhs.add("relationUsed", varUsed);
            jObject.add("RHS", realRhs);
            {if ("" != null) return jObject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

//SELECT Statement of ADIL 1.0
//JsonObjectBuilder SelectStament(JsonObjectBuilder jObject) : {
//Token t, tuple, db, alias  ;
//JsonObjectBuilder tempJB = Json.createObjectBuilder();
//JsonObjectBuilder aliasList = Json.createObjectBuilder();
//JsonArrayBuilder func = Json.createArrayBuilder();
//boolean variableArray = false ;
//JsonArrayBuilder tempTuple = Json.createArrayBuilder();
//JsonArrayBuilder tempDB = Json.createArrayBuilder();
//tempJB.add("isFunction", false);
//}
//{
//{
//int tu = 0;
//int src = 1;
//}
//       <SELECT> ((tuple = <ALPHANUM>{tempJB.add(tuple.image, "field");})|(tuple = <FIELDNAME>{tempJB.add(tuple.image, "path");}))
//                {tempJB.add("name", tuple.image);}
//                        (GetFunction(func){JsonObjectBuilder tuplaDet = Json.createObjectBuilder();
//                        tempJB.add("isFunction", true);  })?
//
//
//       {tempTuple.add(func.build());}
//        (<AS> alias = <ALPHANUM>{aliasList.add(tuple.image, alias.image);}
//
//        )?
//
//
//        (
//                                                 <COMMA> ((tuple = <ALPHANUM> {tempJB.add(tuple.image, "field");})|(tuple = <FIELDNAME>{tempJB.add(tuple.image, "path");}))
//                                                 {tempJB.add("name", tuple.image);}
//                                                 ( GetFunction(func))?
//                                                 {JsonObjectBuilder tuplaDet = Json.createObjectBuilder();
//                                                                                        tempJB.add("isFunction", true);  }
//
//
//                                                    {tempTuple.add(func.build());}
//                                                            (<AS> alias = <ALPHANUM>{aliasList.add(tuple.image, alias.image);}
//
//                                                            )?
//
//
//         )*
//                                                            <FROM> ((db = <ALPHANUM>{tempJB.add(db.image, "field");})|(db = <FIELDNAME>{tempJB.add(db.image, "path");}))
//
//                                                            ({Token dbalias;}dbalias=<ALPHANUM>{aliasList.add(db.image, dbalias.image);})?
//                                                            {
//                                                                tempDB.add(db.image);
//                                                                //vtable.insertName(tuple.image);
//                                                                //vtable.updateType(tuple.image, DataTypeEnum.Undecided.ordinal());
//
//                                                            }
//                                                            (<COMMA> ((db = <ALPHANUM>{tempJB.add(db.image, "field");})|(db = <FIELDNAME>{tempJB.add(db.image, "path");}))
//                                                             { tempDB.add(db.image); src = src + 1; }
//                                                             ({Token dbalias;}dbalias=<ALPHANUM>{aliasList.add(db.image, dbalias.image);})?
//
//                                                             )?
//                                                            (
//                                                                <WHERE>
//
//                                                                {
//                                                                    JsonArrayBuilder predArray = Json.createArrayBuilder();
//                                                                    JsonObjectBuilder pred = Json.createObjectBuilder();
//                                                                }
//                                                                Expression(pred)
//                                                                {
//                                                                    predArray.add(pred.build());
//                                                                }
//                                                                (
//                                                                {Token conj;}
//
//                                                                        (conj=<AND>|conj=<OR>|conj=<NOT>)
//                                                                        {predArray.add(conj.image);}
//                                                                        Expression(pred)
//                                                                        {
//                                                                            predArray.add(pred.build());
//                                                                        }
//                                                                 )*
//                                                                 {tempJB.add("WHERE-PREDICATE", predArray.build());}
//                                                            )?
//
//                                                            //
//
//
//{
//if(tuple.image != "*"){44
//    tempJB.add("tuple", tempTuple.build());
//    tempJB.add("source", tempDB.build());
//}
//
//JsonObject source = tempJB.build();
//if(src>1){
//jObject.add("JOIN", source);
//}
//else {
//jObject.add("SELECT", source);
//}
//}
//{return jObject;}
//}

    // get function inputs
    final public List<FuncInput> GetFunction(Integer... block) throws ParseException {/*@bgen(jjtree) GetFunction */
        ASTGetFunction jjtn000 = new ASTGetFunction(JJTGETFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token x; FuncInput f; List<FuncInput> result = new ArrayList<FuncInput>();Integer vID;
        try {
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:
                case TRUEEX:
                case FALSEEX:
                case ALPHANUM:
                case FIELDNAME:
                case QUOTED_IDENTIFIER:{
                    f = new FuncInput();
                    if (block.length == 1) {f.block = block[0];}
                    if (jj_2_23(3)) {
                        x = jj_consume_token(ALPHANUM);
                        jj_consume_token(EQAL);
                        f.key = x.image;
                    } else {
                        ;
                    }
                    if (jj_2_24(3)) {
                        t = jj_consume_token(ALPHANUM);
                        f.variable = true; f.name = t.image;
                    } else {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case FIELDNAME:{
                                t = jj_consume_token(FIELDNAME);
                                f.variable = true; f.name = t.image;
                                break;
                            }
                            case DIGITS:{
                                t = jj_consume_token(DIGITS);
                                f.value = Integer.parseInt(t.image); f.type = "Integer";
                                break;
                            }
                            case QUOTED_IDENTIFIER:{
                                t = jj_consume_token(QUOTED_IDENTIFIER);
                                f.value = t.image.substring(1, t.image.length()-1); f.type = "String";
                                break;
                            }
                            case TRUEEX:{
                                t = jj_consume_token(TRUEEX);
                                f.value = true; f.type = "Boolean";
                                break;
                            }
                            case FALSEEX:{
                                t = jj_consume_token(FALSEEX);
                                f.value = false; f.type = "Boolean";
                                break;
                            }
                            default:
                                jj_la1[37] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    result.add(f);
                    label_15:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[38] = jj_gen;
                                break label_15;
                        }
                        f = new FuncInput(); if (block.length == 1) {f.block = block[0];}
//if (block.length == 1) {f.block = block[0];}

                        jj_consume_token(COMMA);
                        if (jj_2_25(3)) {
                            x = jj_consume_token(ALPHANUM);
                            jj_consume_token(EQAL);
                            f.key = x.image;
                        } else {
                            ;
                        }
                        if (jj_2_26(3)) {
                            t = jj_consume_token(ALPHANUM);
                            f.variable = true; f.name = t.image;
                        } else {
                            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                                case FIELDNAME:{
                                    t = jj_consume_token(FIELDNAME);
                                    f.variable = true; f.name = t.image;
                                    break;
                                }
                                case DIGITS:{
                                    t = jj_consume_token(DIGITS);
                                    f.value = Integer.parseInt(t.image); f.type = "Integer";
                                    break;
                                }
                                case QUOTED_IDENTIFIER:{
                                    t = jj_consume_token(QUOTED_IDENTIFIER);
                                    f.value = t.image.substring(1, t.image.length()-1); f.type = "String";
                                    break;
                                }
                                case TRUEEX:{
                                    t = jj_consume_token(TRUEEX);
                                    f.value = true; f.type = "Boolean";
                                    break;
                                }
                                case FALSEEX:{
                                    t = jj_consume_token(FALSEEX);
                                    f.value = false; f.type = "Boolean";
                                    break;
                                }
                                default:
                                    jj_la1[39] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                        result.add(f);
                    }
                    break;
                }
                default:
                    jj_la1[40] = jj_gen;
                    ;
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return result;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // AWESOME FUNCTION Statement ADIL 1.0
//todo: add check for localVar
    final public JsonObjectBuilder AWSMFunction(JsonObjectBuilder l, List<String> names, Integer... block) throws ParseException {/*@bgen(jjtree) AWSMFunction */
        ASTAWSMFunction jjtn000 = new ASTAWSMFunction(JJTAWSMFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v; Token t;
        String[] v1;
        String funName;
        boolean generateOutput = true;
        Map<String, Integer> localVarMap;
        List<FuncInput> parameter = new ArrayList<FuncInput>();
        List<FuncInput> tempParameter;
        JsonArrayBuilder parameterJson = Json.createArrayBuilder();
        JsonArrayBuilder outputVariable = Json.createArrayBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder(); JsonObjectBuilder rhs = Json.createObjectBuilder();
        try {
            if (block.length > 0) {
//  localVarMap = localVar.get(0);
                generateOutput = false;
            }
            if (jj_2_27(5)) {
                t = jj_consume_token(ALPHANUM);
                funName = t.image; l.add("funcName", t.image);
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case FIELDNAME:{
                        v = jj_consume_token(FIELDNAME);
                        v1 = v.image.split("\u005c\u005c.");
                        FuncInput firstPara = new FuncInput();
                        firstPara.name = v1[0]; firstPara.variable = true; if(block.length == 1){firstPara.block = block[0];}
                        parameter.add(firstPara);funName = v1[1];l.add("funcName", funName);
                        break;
                    }
                    default:
                        jj_la1[41] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            tempParameter = GetFunction(block);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//JsonObject funcProp = ParserUtil.validateFunction(t.image); String output = funcProp.getString("output");
            //List<String> types = Arrays.asList(output.split("#"));
            parameter.addAll(tempParameter);
            Pair<List<FuncInput>, List<AwsmDataType>> allInfo = FunctionUtil.validateFunction(funName, parameter, names, vtable);
            List<FuncInput> input = allInfo.first;
            List<AwsmDataType> output = allInfo.second;
            // add input to the rhs of output json
            for (FuncInput f : input) {
                parameterJson.add(f.toJsonObject());
            }
            // insert output to variable table and add to the lhs
            for (AwsmDataType d : output) {
                if (generateOutput) {
                    vtable.insertEntry(variableID, d.toTableEntry());
                    outputVariable.add(d.toJsonObject(variableID));
                    variableID += 1;
                }
                else {
                    // if there is block which means it should be a subexpression in map or reduce which deoesn't
                    // generate new variable, so gives it a -1 varID and a block ID since it is a local vitrual variable
                    outputVariable.add(d.toJsonObject(-1, block));
                }
            }
//    if (block.length == 1){
//        lhs.add("blockID", block[0]);
//    }
            lhs.add("variables",outputVariable.build());
            rhs.add("parameters",parameterJson.build());
            l.add("LHS", lhs.build()).add("RHS", rhs.build());
            l.add( "blockType", "FuncCall");
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject rangeElement() throws ParseException {/*@bgen(jjtree) rangeElement */
        ASTrangeElement jjtn000 = new ASTrangeElement(JJTRANGEELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder obj = Json.createObjectBuilder(); Token t;
        Integer vID; String typeString; Object value;
        try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:{
                    t = jj_consume_token(DIGITS);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    obj.add("hasValue", true).add("value",  Integer.valueOf(t.image)); {if ("" != null) return obj.build();}
                    break;
                }
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    vID = vtable.searchVariable(t.image).first;
                    typeString=vtable.getVarType(vID);
                    value = vtable.getVariableProperties(vID).getValue();
                    if (!typeString.equals("Integer")) {
                        {if (true) throw new IllegalArgumentException("start of range should be integer");}
                    }
                    if (value == null) {
                        obj.add("hasValue", false).add("varName", t.image).add("varID", vID);
                    }
                    else {
                        obj.add("hasValue", true).add("value", (Integer) value); }
                    {if ("" != null) return obj.build();}
                    break;
                }
                default:
                    jj_la1[42] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void ListCreation(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ListCreation */
        ASTListCreation jjtn000 = new ASTListCreation(JJTLISTCREATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObject start; JsonObject end; JsonObject step;
        Token s; Token e; Token st; String typeString; Object value;
        try {
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            jj_consume_token(StartSQBracket);
            jj_consume_token(RANGE);
            jj_consume_token(FBRACKETSTART);
            start = rangeElement();
            jj_consume_token(COMMA);
            end = rangeElement();
            jj_consume_token(COMMA);
            step = rangeElement();
            jj_consume_token(FBRACKETEND);
            jj_consume_token(EndSQBracket);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
////temp.build().getJsonObject("filterVariable").getString("varType");
////add to vtable
//vType = types.first;eleType = types.second;
            lhs.add("varName", t.image).add("varID", variableID).add("varType", "List").add("elementType", "Integer");
            rhs.add("start", start).add("end", end).add("step", step);
            ListTableEntry vtEntry = new ListTableEntry(t.image);
            vtEntry.setElementType(DataTypeEnum.valueOf("Integer").ordinal());
            vtable.insertEntry(variableID, vtEntry);
            variableID += 1;
            jObject.add("LHS", lhs.build()).add("RHS", rhs.build());
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FilterAssignment(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) FilterAssignment */
        ASTFilterAssignment jjtn000 = new ASTFilterAssignment(JJTFILTERASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; JsonObjectBuilder lhs = Json.createObjectBuilder(); String vType;
        JsonObjectBuilder temp; Pair<String, Integer> types; Integer eleType;
        try {
            // vType should be list or matrix
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            types = WhereExpression(jObject);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//temp.build().getJsonObject("filterVariable").getString("varType");
//add to vtable
            vType = types.first;eleType = types.second;
            lhs.add("varName", t.image).add("varID", variableID).add("varType", vType);
            VariableTableEntry vtEntry  = createVariableEntry(t.image,vType);
            if ( eleType != 0) {
                ((ListTableEntry) vtEntry).setElementType(eleType);
                lhs.add("elementType", DataTypeEnum.values()[eleType].name());
            }
            vtable.insertEntry(variableID, vtEntry);
            variableID += 1;
            jObject.add("LHS", lhs.build());
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // this expression is the helper expression for filterExpression and does not generate any output variable
    final public Pair<String, Integer> WhereExpression(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) WhereExpression */
        ASTWhereExpression jjtn000 = new ASTWhereExpression(JJTWHEREEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v;  JsonObjectBuilder l = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonArrayBuilder rsult = Json.createArrayBuilder();
        JsonObjectBuilder filteredVar = Json.createObjectBuilder();
        JsonObjectBuilder iterateVar = Json.createObjectBuilder();
        String vType;
        Integer elementType = 0;
        Integer thisBlock = blockID;
        blockID += 1;
        Integer tmRowID = 0;
        Integer tmColID = 0;
        try {
            // v is the variable to be filtered
            v = jj_consume_token(ALPHANUM);
//    if (localVarType.containsKey(v.image)) {
//      int iteratedVarID = localVarType.get(v.image);
//      ListTableEntry lt = (ListTableEntry) vt.getVariableProperties(iteratedVarID);
//      // get the element type of mapped variable which should be a matrix or a list, if list get the element type
//      vType = DataTypeEnum.values()[lt.getElementType()].name();
//      // get the mapped variable's element type
//      if (vType.equals("List")) {
//        elementType = (Integer) l.getMetaData();
//        filteredVar.add("elementType", elementType);
//      }
//      filteredVar.add("varName", v.image).add("varType", vType).add("isLocal", "true").add("iteratedVarID", iteratedVarID);
//    }
//    else {
            Pair<Integer, Integer> vIDbID = vtable.searchVariable(v.image, block);Integer vID = vIDbID.first; Integer bID = vIDbID.second; vType = vtable.getVarType(vID);
            filteredVar.add("varName", v.image).add("varType", vType).add("varID", vID);
            if (bID != -1) {
                filteredVar.add("localVar", "true").add("blockID", bID);
            }
// if the filtered variable is a list, then get the element variable type as the localVar's type. Else, it is a matrix and will be decide later
            if (vType.equals("List")) {
                ListTableEntry vte = (ListTableEntry) vtable.getVariableProperties(vID);
                elementType = vte.getElementType();
                String eleTypeString = DataTypeEnum.values()[elementType].name();
                filteredVar.add("elementType", eleTypeString);
                // if List, then just create one TE
                VariableTableEntry vtEntry  = createVariableEntry("_", eleTypeString, thisBlock);
                vtEntry.setParentID(vID);
                vtable.insertEntry(variableID, vtEntry);
                iterateVar.add("varID", variableID).add("varName", "_").add("varType", eleTypeString);
                variableID += 1;
            }
            else {
                // create two table entries
                // todo: need to add varIDs and elementType
                VariableTableEntry vt1Entry  = createVariableEntry("_:Row", vType + "Row", thisBlock);
                vt1Entry.setParentID(vID);
                tmRowID = variableID;
                vtable.insertEntry(tmRowID, vt1Entry);
                variableID += 1;
                VariableTableEntry vt2Entry  = createVariableEntry("_:Column", vType + "Column", thisBlock);
                vt2Entry.setParentID(vID);
                tmColID = variableID;
                vtable.insertEntry(tmColID, vt2Entry);
                variableID += 1;
            }

            //    iterateVar.add("varID", variableID).add("varName", "_").add("varType", eleTypeString);
            //    jObject.add("iterateVariable", iterateVar.build());
            //  if (ele.equals("List")) {
            //  ((ListTableEntry) vtEntry).setElementType(mappedVariableMetaData);
            //  }

            jj_consume_token(WHERE);
            Expression(l, vID, vType, elementType, thisBlock, block);
            JsonObject lObj = l.build();
            rsult.add(lObj);
            // todo: if not list, set elementType based on expression output
            if (!vType.equals("List"))  {
                String tmElementType = lObj.getString("iterateType");
                if (tmElementType.equals("MatrixRow")) {
                    iterateVar.add("varID", tmRowID).add("varName", "_:Row").add("varType", tmElementType);
                }
                else {
                    iterateVar.add("varID", tmRowID).add("varName", "_:Row").add("varType", tmElementType);
                }
            }
            label_16:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case AND:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[43] = jj_gen;
                        break label_16;
                }
                l = Json.createObjectBuilder();
                jj_consume_token(AND);
                Expression(l, vID, vType, elementType, thisBlock, block);
                lObj = l.build(); rsult.add(lObj);
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//   rhs.add("varName", v.image).add("varID", vID);
//     rhs.add("filterVariable", filteredVar.build()).add("filterExpression", rsult.build()).add("blockID", blockID);
            rhs.add("filterExpression", rsult.build()).add("blockID", thisBlock);
            jObject.add("filterVariable", filteredVar.build()).add("iterateVar", iterateVar).add("RHS", rhs.build()).add("blockType", "FilterExpression");
            {if ("" != null) return new Pair<String, Integer>(vType, elementType);}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    //Cypher helper functions and Cypher expression
    final public JsonArray property(String type,  Integer id,  PGTableEntry vte) throws ParseException {/*@bgen(jjtree) property */
        ASTproperty jjtn000 = new ASTproperty(JJTPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token v; String consType; JsonObject varDet;JsonArrayBuilder label; JsonArrayBuilder prop;boolean var = false;Integer vID; JsonArrayBuilder cons = Json.createArrayBuilder();JsonObjectBuilder tempJB;
        try {
            label_17:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COLON:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[44] = jj_gen;
                        break label_17;
                }
                jj_consume_token(COLON);
                t = jj_consume_token(ALPHANUM);
                consType = type+"Label";  cons.add(ParserUtil.addCypherConstraint(vte, consType, id, t.image).build());
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case StartCurlyBracket:{
                    jj_consume_token(StartCurlyBracket);
                    t = jj_consume_token(ALPHANUM);
                    jj_consume_token(COLON);
                    if (jj_2_28(5)) {
                        v = jj_consume_token(ALPHANUM);
                        var = true;
                    } else if (jj_2_29(5)) {
                        v = jj_consume_token(DIGITS);
                    } else if (jj_2_30(5)) {
                        v = jj_consume_token(QUOTED_IDENTIFIER);
                        v.image = v.image.substring(1, v.image.length()-1);
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    consType = type+"Prop";tempJB = ParserUtil.addCypherConstraint(vte, consType, id, t.image);
                    if (var) {vID = vtable.searchVariable(v.image).first; tempJB.add("rhs", Json.createObjectBuilder().add("varName", v.image).add("varID", vID).build());}
                    else {tempJB.add("rhs", v.image);} cons.add(tempJB);
                    label_18:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[45] = jj_gen;
                                break label_18;
                        }
                        jj_consume_token(COMMA);
                        t = jj_consume_token(ALPHANUM);
                        jj_consume_token(COLON);
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case ALPHANUM:{
                                var = false;
                                v = jj_consume_token(ALPHANUM);
                                var = true;
                                break;
                            }
                            default:
                                jj_la1[46] = jj_gen;
                                if (jj_2_31(5)) {
                                    v = jj_consume_token(DIGITS);
                                } else if (jj_2_32(5)) {
                                    v = jj_consume_token(QUOTED_IDENTIFIER);
                                    v.image = v.image.substring(1, v.image.length()-1);
                                } else {
                                    jj_consume_token(-1);
                                    throw new ParseException();
                                }
                        }
                        consType = type+"Prop";
                        tempJB = ParserUtil.addCypherConstraint(vte, consType, id, t.image);
                        if (var) {vID = vtable.searchVariable(v.image).first; tempJB.add("rhs", Json.createObjectBuilder().add("varName", v.image).add("varID", vID).build());}
                        else {tempJB.add("rhs", v.image);} cons.add(tempJB);
                    }
                    jj_consume_token(EndCurlyBracket);
                    break;
                }
                default:
                    jj_la1[47] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return cons.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject NodeExpression(Integer nodeID,PGTableEntry vte) throws ParseException {/*@bgen(jjtree) NodeExpression */
        ASTNodeExpression jjtn000 = new ASTNodeExpression(JJTNODEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder l = Json.createObjectBuilder(); JsonObjectBuilder node = Json.createObjectBuilder(); Token t; JsonArray constraints = Json.createArrayBuilder().build();JsonArray tempCons;
        try {
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    node.add("alias", t.image);
                    break;
                }
                default:
                    jj_la1[48] = jj_gen;
                    ;
            }
            node.add("nodeID", nodeID);
            constraints = property("node", nodeID, vte);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("node", node.build());
            l.add("constraints", constraints);
            {if ("" != null) return l.build();}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject PathExpression(Integer nodeID, Integer edgeID, PGTableEntry vte) throws ParseException {/*@bgen(jjtree) PathExpression */
        ASTPathExpression jjtn000 = new ASTPathExpression(JJTPATHEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token e; Token t;JsonObject node=Json.createObjectBuilder().build();
        JsonObjectBuilder edge=Json.createObjectBuilder();
        JsonArrayBuilder edges = Json.createArrayBuilder();
        JsonArray constraints = Json.createArrayBuilder().build();
        JsonArrayBuilder nodes = Json.createArrayBuilder();
        JsonArray tempCons;
        Integer inNodeID; Integer outNodeID;JsonObjectBuilder l = Json.createObjectBuilder();
        try {
            node = NodeExpression(nodeID, vte);
            inNodeID = nodeID; nodeID = nodeID+1; nodes.add(node.getJsonObject("node"));constraints = ParserUtil.concatArray(constraints, node.getJsonArray("constraints"));
            label_19:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MINUS:
                    case OUTPATH:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[49] = jj_gen;
                        break label_19;
                }
                edge = Json.createObjectBuilder(); edge.add("edgeID",edgeID);edge.add("inNodeID", inNodeID);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case OUTPATH:{
                        jj_consume_token(OUTPATH);
                        break;
                    }
                    case MINUS:{
                        jj_consume_token(MINUS);
                        break;
                    }
                    default:
                        jj_la1[50] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(StartSQBracket);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ALPHANUM:{
                        t = jj_consume_token(ALPHANUM);
                        edge.add("alias", t.image);
                        break;
                    }
                    default:
                        jj_la1[51] = jj_gen;
                        ;
                }
                tempCons = property("edge", edgeID, vte);
                constraints = ParserUtil.concatArray(constraints, tempCons);
                jj_consume_token(EndSQBracket);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MINUS:{
                        jj_consume_token(MINUS);
                        break;
                    }
                    case INPATH:{
                        jj_consume_token(INPATH);
                        break;
                    }
                    default:
                        jj_la1[52] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                node = NodeExpression(nodeID, vte);
                nodes.add(node.getJsonObject("node"));constraints = ParserUtil.concatArray(constraints, node.getJsonArray("constraints"));outNodeID = nodeID; edge.add("outNodeID", outNodeID);inNodeID=nodeID; nodeID = nodeID +1; edgeID = edgeID+1; edges.add(edge.build());
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("edge", edges.build());
            l.add("node", nodes.build());
            l.add("constraints", constraints);
            l.add("nodeID", nodeID);
            l.add("edgeID", edgeID);
            {if ("" != null) return l.build();}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder CypherStatement(JsonObjectBuilder l, Integer... block) throws ParseException {/*@bgen(jjtree) CypherStatement */
        ASTCypherStatement jjtn000 = new ASTCypherStatement(JJTCYPHERSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v; Token t; Token g; Token var;
        JsonArray node = Json.createArrayBuilder().build();
        JsonArray edge = Json.createArrayBuilder().build();
        JsonArrayBuilder path = Json.createArrayBuilder();
        JsonArrayBuilder returns = Json.createArrayBuilder();
        JsonArray constraints = Json.createArrayBuilder().build();
        JsonObject temp;
        JsonObjectBuilder tempNode;
        JsonObjectBuilder tempEdge;
        JsonObjectBuilder tempCons;
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        String type; String name; String vteType; String obj;
        Integer vID;
        Integer nodeID = 0;
        Integer edgeID =0;
        PGTableEntry xt;
        try {
            lhs.add("type", "cypherBinding");
            var = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            jj_consume_token(AwsmCypher);
            jj_consume_token(FBRACKETSTART);
            g = jj_consume_token(ALPHANUM);
            vID = vtable.searchVariable(g.image).first;
            vteType = vtable.getVarType(vID);
            if (vteType.equals("PropertyGraph")){
                xt = (PGTableEntry) vtable.getVariableProperties(vID);}
            else{{if (true) throw new IllegalArgumentException(g.image + "no graph");}}
            rhs.add("graphName", g.image);
            rhs.add("graphID", vID);
            jj_consume_token(COMMA);
            jj_consume_token(MATCH);
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(EQAL);
            path.add(t.image);
            temp = PathExpression(nodeID, edgeID, xt);
            nodeID = temp.getInt("nodeID");
            edgeID = temp.getInt("edgeID");
            node = ParserUtil.concatArray(node, temp.getJsonArray("node"));
            edge = ParserUtil.concatArray(edge, temp.getJsonArray("edge"));
            constraints = ParserUtil.concatArray(constraints, temp.getJsonArray("constraints"));
            label_20:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[53] = jj_gen;
                        break label_20;
                }
                jj_consume_token(COMMA);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ALPHANUM:{
                        t = jj_consume_token(ALPHANUM);
                        jj_consume_token(EQAL);
                        path.add(t.image);
                        break;
                    }
                    default:
                        jj_la1[54] = jj_gen;
                        ;
                }
                temp = PathExpression(nodeID, edgeID, xt);
                nodeID = temp.getInt("nodeID");
                edgeID = temp.getInt("edgeID");
                node = ParserUtil.concatArray(node, temp.getJsonArray("node"));
                edge = ParserUtil.concatArray(edge, temp.getJsonArray("edge"));
                constraints = ParserUtil.concatArray(constraints, temp.getJsonArray("constraints"));
            }
            JsonArray nodeArray = ParserUtil.extractKey(node,"alias");
            JsonArray edgeArray = ParserUtil.extractKey(edge,"alias");
            JsonArray pathArray = path.build();
            jj_consume_token(RETURN);
            if (jj_2_33(3)) {
                t = jj_consume_token(FIELDNAME);
                type="property"; name = t.image;
            } else if (jj_2_34(3)) {
                v = jj_consume_token(ALPHANUM);
                jj_consume_token(FBRACKETSTART);
                t = jj_consume_token(ALPHANUM);
                jj_consume_token(FBRACKETEND);
                type="cypherFunction"; name = v.image+"("+t.image+ ")";
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ALPHANUM:{
                        t = jj_consume_token(ALPHANUM);
                        type=getCypherObjectType(nodeArray, edgeArray, pathArray, t.image);name = t.image;
                        break;
                    }
                    default:
                        jj_la1[55] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            JsonObjectBuilder tempJB = Json.createObjectBuilder();
            tempJB.add("name", name); tempJB.add("objectType", type);
            returns.add(tempJB.build());
            label_21:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[56] = jj_gen;
                        break label_21;
                }
                jj_consume_token(COMMA);
                if (jj_2_35(3)) {
                    t = jj_consume_token(ALPHANUM);
                    jj_consume_token(DOT);
                    v = jj_consume_token(ALPHANUM);
                    obj=getCypherObjectType(nodeArray, edgeArray, pathArray, t.image);type=xt.getProperty(v.image ,obj); name = t.image+"."+v.image;
                } else if (jj_2_36(3)) {
                    v = jj_consume_token(ALPHANUM);
                    jj_consume_token(FBRACKETSTART);
                    t = jj_consume_token(ALPHANUM);
                    jj_consume_token(FBRACKETEND);
                    type="cypherFunction"; name = v.image+"("+t.image+ ")";
                } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ALPHANUM:{
                            t = jj_consume_token(ALPHANUM);
                            type=getCypherObjectType(nodeArray, edgeArray, pathArray, t.image);name = t.image;
                            break;
                        }
                        default:
                            jj_la1[57] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                tempJB = Json.createObjectBuilder();
                tempJB.add("name", name); tempJB.add("objectType", type);
                returns.add(tempJB.build());
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            lhs.add("varName", var.image);
            lhs.add("varID", variableID);
            lhs.add("schema", returns.build());
            if (block.length == 1){
                lhs.add("blockID", block[0]);
            }
            l.add("LHS", lhs.build());
            RelationTableEntry rte = new RelationTableEntry(var.image, JsonUtil.jsonArrayToMap(returns.build(), "name", "objectType"), block);
            vtable.insertEntry(variableID, rte);
            variableID = variableID+1;
            rhs.add("node", node);
            rhs.add("edge", edge);
            rhs.add("constraints", constraints);
            l.add("RHS", rhs);
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

//
//
//// FOR ALL ADIL 1.0
//JsonObjectBuilder ForAllExpression(JsonObjectBuilder l, Integer... block):
//{
//    Token t, col,partVar;
//    JsonObjectBuilder temp = Json.createObjectBuilder();
//    JsonObjectBuilder tempJB = Json.createObjectBuilder();
//    JsonArrayBuilder array = Json.createArrayBuilder();
//    String elementType;
//    Integer vID;
//    JsonArrayBuilder returnVar = Json.createArrayBuilder();
//    VariableTableEntry vte;
//    Integer thisBlock = blockID;
//    blockID = blockID +1;
//
//}
//{
//<FORALL> t = <ALPHANUM> {temp.add("varName", t.image);}<COLON> col = <ALPHANUM>{tempJB.add("name", col.image);
//vID = vtable.searchVariable(col.image, block);
//ListTableEntry xt = (ListTableEntry) vtable.getVariableProperties(vID);
//int type = xt.getElementType();elementType=DataTypeEnum.values()[type].name();
//tempJB.add("varID", vID);
//tempJB.add("elementType", elementType);
//VariableTableEntry vtEntry;
//if (elementType.equals("Undecided")){
//vtEntry  = new  LiteralTableEntry(t.image, DataTypeEnum.valueOf(elementType).ordinal(), thisBlock);
//}
//else
//{vtEntry  = vtable.createVariableEntry(t.image,elementType , thisBlock);}
//vtable.insertEntry(variableID, vtEntry);
//temp.add("varID", variableID);
//temp.add("blockID", thisBlock);
//variableID = variableID+1;
//temp.add("type", elementType);
//l.add("indexVar", temp.build());
//}
////             (
////                     (
////                                 <StartSQBracket>
////                                 {
////                                           JsonObjectBuilder pred = Json.createObjectBuilder();
////                                 }
////                                  Expression(pred)
////                                            {
////                                               tempJB.add("PREDICATE", pred.build());
////                                            }
////                                 <EndSQBracket>
////                     )
////                     |
////                     (  <PARTITION> <ON> partVar = <ALPHANUM> ){tempJB.add("partfield",partVar.image);}
////
////             )?
//             (<StartCurlyBracket>
//
//
//                                                        (
//                                                        ({JsonObjectBuilder tempx = Json.createObjectBuilder();} (LOOKAHEAD(5)AssignmentStatement(tempx, thisBlock)|LOOKAHEAD(5)ForAllExpression(tempx, thisBlock)|SQLPASS(tempx, thisBlock))<SEMICOLON> {array.add(tempx.build());})
//                                                        //|({JsonObjectBuilder tempy = Json.createObjectBuilder();}ForAllExpression(tempy)<SEMICOLON>{array.add(tempy.build());})
//                                                        )+
//
//              <EndCurlyBracket>
//              ) <RETURN> (t = <ALPHANUM> {
//                vID = vtable.searchVariable(t.image, thisBlock);
//                vte = vtable.getVariableProperties(vID);
//                if (block.length != 0) {vte.setBlockID(block[0]);}
//                                else {vte.setBlockID(-1);}
//                returnVar.add(Json.createObjectBuilder().add("varName", t.image).add("inLoopVarID", vID).add("varID", variableID).add("varType", DataTypeEnum.values()[vte.getType()].name()).build());
//                vtable.insertEntry(variableID, vte);
//                variableID = variableID+1;} )
//              (<COMMA> t = <ALPHANUM> {
//                vID = vtable.searchVariable(t.image, thisBlock);
//                vte = vtable.getVariableProperties(vID);
//                if (block.length != 0) {vte.setBlockID(block[0]);}
//                else {vte.setBlockID(-1);}
//                 vtable.insertEntry(variableID, vte);
//                returnVar.add(Json.createObjectBuilder().add("varName", t.image).add("inLoopVarID", vID).add("varID", variableID).add("varType", DataTypeEnum.values()[vte.getType()].name()).build());
//                variableID = variableID+1;}
//               )*
//
//{
//l.add("source", tempJB.build());
//l.add("returnVar", returnVar.build());
//l.add("inLoop", array.build());
//int length = 10;
//boolean useLetters = true;
//boolean useNumbers = false;
////String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);
////l.add("name", col.image+":ForAll");
////l.add("lid",generatedString);
//
////l.add("FORALL", tempJB.build());
//
//}
//{return l;}
//
//}

    // Map Expression instead of Forloop; The validation for element in map is skipped except function.
    final public void MapExpression(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) MapExpression */
        ASTMapExpression jjtn000 = new ASTMapExpression(JJTMAPEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token var; Token tempVar; Pair<String, Integer> lambdaVar; JsonObjectBuilder mappedVar = Json.createObjectBuilder();
        Integer vID; JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder(); String resultEleType; String metadata = null;
        boolean isTuple = false;
        Integer mappedVariableMetaData=0;
        Integer thisBlock; String ele; String vType; Token t; JsonObject rhsResult; ListTableEntry resultEntry;
        JsonArray output = Json.createArrayBuilder().build();
        JsonObjectBuilder iterateVar = Json.createObjectBuilder();
        try {
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            var = jj_consume_token(ALPHANUM);
            thisBlock = blockID;
            rhs.add("blockID", thisBlock);
            blockID += 1;
            vID = vtable.searchVariable(var.image).first;
            // get the type of the mapped variable which should be a list and get the element type which should be
            // the type of the iterate local variable, and create tableentry for the lcoal variable with the block id and the parent id.
            vType = vtable.getVarType(vID);
            if (!vType.equals("List")) {
                {if (true) throw new IllegalArgumentException("Pass a list variable to Map");}
            }
            mappedVar.add("varID", vID).add("varType", "List").add("varName", var.image);
            ListTableEntry lt = (ListTableEntry) vtable.getVariableProperties(vID);
            // get the element type of mapped variable which should be a matrix or a list, if list get the element type
            ele = DataTypeEnum.values()[lt.getElementType()].name();
            mappedVar.add("elementType", ele);
            // get the mapped variable's element type
            if (ele.equals("List")) {
                mappedVariableMetaData = (Integer) lt.getMetaData();
                mappedVar.add("elementTypeofElementList", DataTypeEnum.values()[mappedVariableMetaData].name());
            }
            jObject.add("mappedVariable", mappedVar.build());
            jj_consume_token(DOT);
            jj_consume_token(MAP);
            jj_consume_token(FBRACKETSTART);
            tempVar = jj_consume_token(ALPHANUM);
            iterateVar.add("varID", variableID).add("varName", tempVar.image).add("varType", ele);
            jObject.add("iterateVariable", iterateVar.build());
            VariableTableEntry vtEntry  = vtable.createVariableEntry(tempVar.image, ele, thisBlock);
            if (ele.equals("List")) {
                ((ListTableEntry) vtEntry).setElementType(mappedVariableMetaData);
            }
            vtEntry.setParentID(vID);
            vtable.insertEntry(variableID, vtEntry);
            variableID += 1;
            jj_consume_token(MAPTO);
            if (jj_2_37(5)) {
                WhereExpression(rhs, thisBlock);
                rhsResult = rhs.build(); resultEleType = rhsResult.getJsonObject("filterVariable").getString("varType");
                if (resultEleType.equals("List")) {metadata = rhsResult.getJsonObject("filterVariable").getString("elementType");}
            } else if (jj_2_38(10)) {
                MATHASSIGNMENT(rhs, "~", thisBlock);
                rhs.add( "blockType", "OperationAssign");rhsResult = rhs.build();resultEleType = rhsResult.getJsonObject("LHS").getString("varType");
            } else if (jj_2_39(10)) {
                LISTASSIGNMENT(rhs, "~", thisBlock);
                rhsResult = rhs.build();resultEleType = "List";
            } else if (jj_2_40(10)) {
                TUPLEEXTRACTION(rhs, "~", thisBlock);
                rhs.add("blockType", "TupleExtraction");rhsResult = rhs.build();resultEleType = rhsResult.getJsonObject("LHS").getString("varType");
            } else if (jj_2_41(20)) {
                AWSMFunction(rhs, Arrays.asList("_"), thisBlock);
                rhsResult = rhs.build();
// if only one type, get eleType, else, eletype should be tuple and the metadata should be kept
                output = rhsResult.getJsonObject("LHS").getJsonArray("variables");
                if (output.size() == 1) {
                    resultEleType = rhsResult.getJsonObject("LHS").getJsonArray("variables").getJsonObject(0).getString("varType");}
                else {
                    resultEleType = "Tuple";
                    isTuple = true;
                }
            } else if (jj_2_42(10)) {
                MATRIXASSIGNMENT(rhs, "~", thisBlock);
                rhsResult = rhs.build();resultEleType = "Matrix";
            } else if (jj_2_43(10)) {
                LITERALASSIGNMENT(rhs, "~", thisBlock);
                rhsResult = rhs.build();resultEleType = rhsResult.getJsonObject("LHS").getString("varType");
            } else if (jj_2_44(10)) {
                TUPLEASSIGNMENT(rhs, "~", thisBlock);
                rhs.add("blockType", "TupleAssign"); rhsResult = rhs.build();resultEleType = "Tuple";
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case CONSTRUCTGRAPHFROMRELATION:{
                        ConstructGraphFromRelationExpression(rhs, thisBlock);
                        rhsResult = rhs.build(); resultEleType = "PropertyGraph";
                        break;
                    }
                    case EXECUTESQL:{
                        SQLExpression(rhs, false, thisBlock);
                        rhsResult = rhs.build(); resultEleType = "Relation";
                        break;
                    }
                    case FBRACKETSTART:{
                        CypherForMap(rhs, thisBlock);
                        rhsResult = rhs.build(); resultEleType = "Relation";
                        break;
                    }
                    default:
                        jj_la1[58] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
// this is result
            lhs.add("varName", t.image).add("varID", variableID).add("varType", "List").add("elementType", resultEleType);
            resultEntry = new ListTableEntry(t.image);
            resultEntry.setElementType(DataTypeEnum.valueOf(resultEleType).ordinal());
// if a list of lists, get the elementType of element list
            if (metadata != null) {
                lhs.add("listMetaData", metadata);
                resultEntry.setMetaData(metadata);
            }
// if a list of tuples, get the tuples types
            if (isTuple) {
                List<String> tupleTypes = JsonUtil.jsonArrayToStringListWithKey(output, "varType");
                lhs.add("tupleTypes", JsonUtil.arrayToJsonArray(tupleTypes));
                resultEntry.setMetaData(tupleTypes);
            }

// create tableentry and add to vtable
            vtable.insertEntry(variableID, resultEntry);
            variableID += 1;
            jObject.add("LHS", lhs.build()).add("RHS", rhsResult);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // for reduce, the two iterate Var temp1, temp2, should have the same type with the return type of
// reduceExpression(temp1, temp2), this is not required for map
    final public void ReduceExpression(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) ReduceExpression */
        ASTReduceExpression jjtn000 = new ASTReduceExpression(JJTREDUCEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token tempVar1; Token tempVar2; Token var;Integer thisBlock; String vType;
        Integer vID; JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder reducedVar = Json.createObjectBuilder();VariableTableEntry vtEntry;
        String ele; JsonObject rhsResult;VariableTableEntry resultEntry;
        JsonObjectBuilder leftLocalVar = Json.createObjectBuilder();
        JsonObjectBuilder rightLocalVar = Json.createObjectBuilder();
        try {
            t = jj_consume_token(ALPHANUM);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            var = jj_consume_token(ALPHANUM);
            thisBlock = blockID;
            rhs.add("blockID", thisBlock);
            blockID += 1;
            vID = vtable.searchVariable(var.image).first;
            // get the type of the reduced variable which should be a list and get the element type which should be
            // the type of the iterate local variable, and create tableentry for the lcoal variable with the block id and the parent id.
            vType = vtable.getVarType(vID);
            if (!vType.equals("List")) {
                {if (true) throw new IllegalArgumentException("Pass a list variable to Map");}
            }
            reducedVar.add("varID", vID).add("varType", "List").add("varName", var.image);
            ListTableEntry lt = (ListTableEntry) vtable.getVariableProperties(vID);
            // get the element type of reduced variable which should be a matrix or a list
            ele = DataTypeEnum.values()[lt.getElementType()].name();
            reducedVar.add("elementType", ele);
            // get the mapped variable's element type
//    if (ele.equals("List")) {
//      mappedVariableMetaData = (Integer) lt.getMetaData();
//        mappedVar.add("elementTypeofElementList", DataTypeEnum.values()[mappedVariableMetaData].name());
//    }
            jObject.add("reducedVariable", reducedVar);
            jj_consume_token(DOT);
            jj_consume_token(REDUCE);
            jj_consume_token(FBRACKETSTART);
            jj_consume_token(FBRACKETSTART);
            tempVar1 = jj_consume_token(ALPHANUM);
            jj_consume_token(COMMA);
            tempVar2 = jj_consume_token(ALPHANUM);
            jj_consume_token(FBRACKETEND);
            leftLocalVar.add("varID", variableID).add("varName", tempVar1.image).add("varType", ele);
            jObject.add("firstLocalVariable", leftLocalVar.build());
            vtEntry  = vtable.createVariableEntry(tempVar1.image, ele, thisBlock);
            vtEntry.setParentID(vID);
            vtable.insertEntry(variableID, vtEntry);
            variableID += 1;
            rightLocalVar.add("varID", variableID).add("varName", tempVar2.image).add("varType", ele);
            jObject.add("secondLocalVariable", rightLocalVar.build());
            vtEntry  = vtable.createVariableEntry(tempVar2.image, ele, thisBlock);
            vtEntry.setParentID(vID);
            vtable.insertEntry(variableID, vtEntry);
            variableID += 1;
            jj_consume_token(MAPTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:
                case FIELDNAME:{
                    AWSMFunction(rhs, Arrays.asList("~"), thisBlock);
                    rhsResult = rhs.build(); vType = rhsResult.getJsonObject("LHS").getJsonArray("variables").getJsonObject(0).getString("varType");
                    break;
                }
                case EXECUTESQL:{
                    SQLExpression(rhs, false, thisBlock);
                    rhsResult = rhs.build(); vType = "Relation";
                    break;
                }
                default:
                    jj_la1[59] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (!vType.equals(ele)) {{if (true) throw new IllegalArgumentException("Reduce expression should return an output with the same type as element inside the reduced variable");}}
            lhs.add("varName", t.image).add("varID", variableID).add("varType", vType);
            resultEntry = vtable.createVariableEntry(t.image,vType);
// create tableentry and add to vtable
            vtable.insertEntry(variableID, resultEntry);
            variableID += 1;
            jObject.add("LHS", lhs.build()).add("RHS", rhsResult);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    //ExecuteSQLPhysical Database Direct
    final public
    JsonObjectBuilder DBPASS(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) DBPASS */
        ASTDBPASS jjtn000 = new ASTDBPASS(JJTDBPASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token s;Token x = null;
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        JsonArrayBuilder typesBuilder = Json.createArrayBuilder();
        JsonArrayBuilder schemasBuilder = Json.createArrayBuilder();
        JsonArray names;
        JsonArray types;
        JsonArray schemas;
        String[] key = {"name", "objectType"};
        JsonObjectBuilder varObj = Json.createObjectBuilder();
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varName", t.image).add("varID", variableID).add("varType", "cypherBinding");
            jj_consume_token(LESS);
            s = jj_consume_token(ALPHANUM);
            varObj.add(key[0], s.image);
            jj_consume_token(COLON);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                    s = jj_consume_token(STRING);
                    break;
                }
                case DATE:{
                    s = jj_consume_token(DATE);
                    break;
                }
                case INT:{
                    s = jj_consume_token(INT);
                    break;
                }
                case NODE:{
                    s = jj_consume_token(NODE);
                    break;
                }
                case PATH:{
                    s = jj_consume_token(PATH);
                    break;
                }
                default:
                    jj_la1[60] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            varObj.add(key[1], s.image); schemasBuilder.add(varObj);
            label_22:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[61] = jj_gen;
                        break label_22;
                }
                jj_consume_token(COMMA);
                s = jj_consume_token(ALPHANUM);
                varObj=Json.createObjectBuilder().add(key[0], s.image);
                jj_consume_token(COLON);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STRING:{
                        s = jj_consume_token(STRING);
                        break;
                    }
                    case DATE:{
                        s = jj_consume_token(DATE);
                        break;
                    }
                    case INT:{
                        s = jj_consume_token(INT);
                        break;
                    }
                    case NODE:{
                        s = jj_consume_token(NODE);
                        break;
                    }
                    case PATH:{
                        s = jj_consume_token(PATH);
                        break;
                    }
                    default:
                        jj_la1[62] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                varObj.add(key[1], s.image); schemasBuilder.add(varObj);
            }
            jj_consume_token(GREATER);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case EXECUTECYPHER:{
                    jj_consume_token(EXECUTECYPHER);

                    break;
                }
                case EXECUTESQL:{
                    jj_consume_token(EXECUTESQL);

                    x = quetedStatement();
                    break;
                }
                default:
                    jj_la1[63] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            JsonArray usedVar = SQLParseUtil.usedVariables(x.image, vtable, block);
            rhs.add("statement", x.image.substring(1, x.image.length()-1));
            rhs.add("varUsed", usedVar);
//JsonObject cr = CypherUtil.handleCypherQuery(x.image, vtable);
//names =  cr.getJsonArray("names");
//rhs.add("varUsed", cr.getJsonArray("varUsed"));
//types = typesBuilder.build();
//if (names.size()!=types.size()){
//throw new IllegalArgumentException("the output schema does not match with its Cypher return variables");
//}
//for (int i = 0; i < types.size(); i++) {
//    tempJB = Json.createObjectBuilder();
//    tempJB.add("name", names.getString(i));
//    tempJB.add("objectType", types.getString(i));
//    schemasBuilder.add(tempJB.build());
//}
            schemas = schemasBuilder.build();
            lhs.add("schema", schemas);
            RelationTableEntry vtEntry = new RelationTableEntry(t.image, JsonUtil.jsonArrayToMap(schemas, "name", "objectType"), block);
            vtable.insertEntry(variableID, vtEntry);
            variableID = variableID+1;
            jObject.add("LHS", lhs.build()).add("RHS", rhs.build());
            {if ("" != null) return jObject;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    //Inside Pass through
    final public

    Token quetedStatement() throws ParseException {/*@bgen(jjtree) quetedStatement */
        ASTquetedStatement jjtn000 = new ASTquetedStatement(JJTQUETEDSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token x;
        try {
            jj_consume_token(FBRACKETSTART);
            x = jj_consume_token(QUOTED_IDENTIFIER);
            jj_consume_token(FBRACKETEND);
            System.out.println(x.image);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return x;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonArray CypherSchema() throws ParseException {/*@bgen(jjtree) CypherSchema */
        ASTCypherSchema jjtn000 = new ASTCypherSchema(JJTCYPHERSCHEMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token s;
        JsonArrayBuilder schemasBuilder = Json.createArrayBuilder();
        String[] key = {"name", "objectType"};
        JsonObjectBuilder varObj = Json.createObjectBuilder();
        try {
            jj_consume_token(LESS);
            s = jj_consume_token(ALPHANUM);
            varObj.add(key[0], s.image);
            jj_consume_token(COLON);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                    s = jj_consume_token(STRING);
                    break;
                }
                case DATE:{
                    s = jj_consume_token(DATE);
                    break;
                }
                case INT:{
                    s = jj_consume_token(INT);
                    break;
                }
                case NODE:{
                    s = jj_consume_token(NODE);
                    break;
                }
                case PATH:{
                    s = jj_consume_token(PATH);
                    break;
                }
                default:
                    jj_la1[64] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            varObj.add(key[1], s.image); schemasBuilder.add(varObj);
            label_23:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[65] = jj_gen;
                        break label_23;
                }
                jj_consume_token(COMMA);
                s = jj_consume_token(ALPHANUM);
                varObj=Json.createObjectBuilder().add(key[0], s.image);
                jj_consume_token(COLON);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STRING:{
                        s = jj_consume_token(STRING);
                        break;
                    }
                    case DATE:{
                        s = jj_consume_token(DATE);
                        break;
                    }
                    case INT:{
                        s = jj_consume_token(INT);
                        break;
                    }
                    case NODE:{
                        s = jj_consume_token(NODE);
                        break;
                    }
                    case PATH:{
                        s = jj_consume_token(PATH);
                        break;
                    }
                    default:
                        jj_la1[66] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                varObj.add(key[1], s.image); schemasBuilder.add(varObj);
            }
            jj_consume_token(GREATER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return schemasBuilder.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void CypherExpression(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) CypherExpression */
        ASTCypherExpression jjtn000 = new ASTCypherExpression(JJTCYPHEREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token x;
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObjectBuilder tempJB = Json.createObjectBuilder();
        JsonArrayBuilder typesBuilder = Json.createArrayBuilder();
        JsonArrayBuilder schemasBuilder = Json.createArrayBuilder();
        JsonArray names;
        JsonArray types;
        JsonArray schemas;
        Token loc = null;
        try {
            jj_consume_token(EXECUTECYPHER);
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ALPHANUM:
                case QUOTED_IDENTIFIER:{
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case QUOTED_IDENTIFIER:{
                            loc = jj_consume_token(QUOTED_IDENTIFIER);
                            rhs.add("database", loc.image.substring(1, loc.image.length()-1));
                            break;
                        }
                        case ALPHANUM:{
                            loc = jj_consume_token(ALPHANUM);
                            rhs.add("graphID", vtable.searchVariable(loc.image, block).first);
                            break;
                        }
                        default:
                            jj_la1[67] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                }
                default:
                    jj_la1[68] = jj_gen;
                    ;
            }
            jj_consume_token(COMMA);
            x = jj_consume_token(QUOTED_IDENTIFIER);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            JsonArray usedVar = SQLParseUtil.usedVariables(x.image, vtable, block);
            rhs.add("statement", x.image.substring(1, x.image.length()-1));
            rhs.add("varUsed", usedVar);
            //JsonObject cr = CypherUtil.handleCypherQuery(x.image, vtable);
            //names =  cr.getJsonArray("names");
            //rhs.add("varUsed", cr.getJsonArray("varUsed"));
            //types = typesBuilder.build();
            //if (names.size()!=types.size()){
            //throw new IllegalArgumentException("the output schema does not match with its Cypher return variables");
            //}
            //for (int i = 0; i < types.size(); i++) {
            //    tempJB = Json.createObjectBuilder();
            //    tempJB.add("name", names.getString(i));
            //    tempJB.add("objectType", types.getString(i));
            //    schemasBuilder.add(tempJB.build());
            //}
            jObject.add("RHS", rhs.build());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void CYPHERPASS(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) CYPHERPASS */
        ASTCYPHERPASS jjtn000 = new ASTCYPHERPASS(JJTCYPHERPASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        JsonArray schemas;
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varName", t.image).add("varID", variableID).add("varType", "cypherBinding");jObject.add("LHS", lhs.build());
            schemas = CypherSchema();
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            CypherExpression(jObject, block);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("schema", schemas);
            RelationTableEntry vtEntry = new RelationTableEntry(t.image, JsonUtil.jsonArrayToMap(schemas, "name", "objectType"), block);
            vtable.insertEntry(variableID, vtEntry);
            variableID = variableID+1;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void CypherForMap(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) CypherForMap */
        ASTCypherForMap jjtn000 = new ASTCypherForMap(JJTCYPHERFORMAP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        JsonArray schemas;
        try {
            jj_consume_token(FBRACKETSTART);
            schemas = CypherSchema();
            jj_consume_token(FBRACKETEND);
            CypherExpression(jObject, block);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("schema", schemas).add("blockType", "Neo4jQuery");
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SOLRPASS(JsonObjectBuilder jObject, Integer... block) throws ParseException {/*@bgen(jjtree) SOLRPASS */
        ASTSOLRPASS jjtn000 = new ASTSOLRPASS(JJTSOLRPASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = new Token();  Token x = new Token();
        Token s = new Token(); Token loc = new Token();
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        Map<String, String> schemas;
        JsonArrayBuilder colBuild = Json.createArrayBuilder();
        String[] key = {"name", "objectType"};
        JsonArray tempAry;
        JsonArrayBuilder tempAryBuild = Json.createArrayBuilder();
        JsonObjectBuilder varObj = Json.createObjectBuilder();
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varID", variableID).add("varName", t.image).add("varType", "Relation");
            jj_consume_token(LESS);
            s = jj_consume_token(ALPHANUM);
            varObj.add(key[0], s.image); colBuild.add(s.image);
            jj_consume_token(COLON);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                    s = jj_consume_token(STRING);
                    break;
                }
                case DATE:{
                    s = jj_consume_token(DATE);
                    break;
                }
                case INT:{
                    s = jj_consume_token(INT);
                    break;
                }
                case TEXT:{
                    s = jj_consume_token(TEXT);
                    break;
                }
                default:
                    jj_la1[69] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            varObj.add(key[1], s.image); tempAryBuild.add(varObj);
            label_24:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[70] = jj_gen;
                        break label_24;
                }
                jj_consume_token(COMMA);
                s = jj_consume_token(ALPHANUM);
                varObj = Json.createObjectBuilder().add(key[0], s.image); colBuild.add(s.image);
                jj_consume_token(COLON);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STRING:{
                        s = jj_consume_token(STRING);
                        break;
                    }
                    case DATE:{
                        s = jj_consume_token(DATE);
                        break;
                    }
                    case INT:{
                        s = jj_consume_token(INT);
                        break;
                    }
                    case TEXT:{
                        s = jj_consume_token(TEXT);
                        break;
                    }
                    default:
                        jj_la1[71] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                varObj.add(key[1], s.image); tempAryBuild.add(varObj);
            }
            jj_consume_token(GREATER);
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            jj_consume_token(EXECUTESOLR);
            jj_consume_token(FBRACKETSTART);
            loc = jj_consume_token(QUOTED_IDENTIFIER);

            rhs.add("collection", loc.image.substring(1, loc.image.length()-1));
            jj_consume_token(COMMA);
            x = jj_consume_token(TRIPLE_QUOTED);
            JsonArray usedVar = SQLParseUtil.usedVariables(x.image, vtable, block);
            rhs.add("varUsed", usedVar);
            rhs.add("statement", x.image.substring(3, x.image.length()-3));
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if(block.length!=0){
                lhs.add("blockID", block[0]);}
            tempAry = tempAryBuild.build();
            lhs.add("schemas", tempAry);
            lhs.add("columns", colBuild.build());
            schemas = JsonUtil.jsonArrayToMap(tempAry,key[0], key[1]);
            RelationTableEntry vtEntry = new RelationTableEntry(t.image, schemas, block);
            vtable.insertEntry(variableID, vtEntry);
            variableID = variableID+1;
            jObject.add("LHS", lhs.build()).add("RHS", rhs.build());
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public JsonArray SQLExpression(JsonObjectBuilder jObject, boolean assignedSchema, Integer... block) throws ParseException {/*@bgen(jjtree) SQLExpression */
        ASTSQLExpression jjtn000 = new ASTSQLExpression(JJTSQLEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token x; Token loc = new Token();
        Map<String, String> schemas;
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        String[] key = {"name", "objectType"};
        JsonArray tempAry = Json.createArrayBuilder().build();
        JsonArray usedTable = Json.createArrayBuilder().build();
        boolean isInDB = false;
        try {
            jj_consume_token(EXECUTESQL);
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case QUOTED_IDENTIFIER:{
                    loc = jj_consume_token(QUOTED_IDENTIFIER);
                    isInDB = true;
                    break;
                }
                default:
                    jj_la1[72] = jj_gen;
                    ;
            }
            jj_consume_token(COMMA);
            x = jj_consume_token(QUOTED_IDENTIFIER);
            jj_consume_token(FBRACKETEND);
            if (isInDB) {
                jObject.add("blockType", "SQLQuery");
                RDBMSUtils DB_UTILS = new RDBMSUtils(config, loc.image.substring(1, loc.image.length()-1));
                if (!assignedSchema) {
                    tempAry = SQLParseUtil.handleSQL(DB_UTILS, x.image, vtable, block);
//        schemas = JsonUtil.jsonArrayToMap(tempAry,key[0], key[1]);
                    usedTable = SQLParseUtil.usedTables(x.image, true, vtable, block);}
            }
            else {
                // only validate and get the schema when it is not local
                jObject.add("blockType", "AwsmSQL");
                tempAry = SQLParseUtil.handleAwsmSQL(x.image, vtable, block);
                // add used Variables
                usedTable = SQLParseUtil.usedTables(x.image, false, vtable, block);
//    schemas = JsonUtil.jsonArrayToMap(tempAry,key[0], key[1]);
//    jObject.add("schemas", schemas);
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jObject.add("schema", tempAry);
            JsonArray usedVar = SQLParseUtil.usedVariables(x.image, vtable, block);
            rhs.add("statement", x.image.substring(1, x.image.length()-1));
            rhs.add("varUsed", usedVar);
            rhs.add("tableUsed", usedTable);
            if (isInDB) {
                rhs.add("database", loc.image.substring(1, loc.image.length()-1));
            }
            jObject.add("RHS", rhs);
            {if ("" != null) return tempAry;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void SQLPASS(JsonObjectBuilder jObject) throws ParseException {/*@bgen(jjtree) SQLPASS */
        ASTSQLPASS jjtn000 = new ASTSQLPASS(JJTSQLPASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token s = new Token();Token x; Token loc = new Token();
        Map<String, String> schemas;
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        String[] key = {"name", "objectType"};
        JsonArray tempAry;
        JsonObjectBuilder temp;
        JsonArrayBuilder tempAryBuild = Json.createArrayBuilder();
        JsonObjectBuilder varObj = Json.createObjectBuilder();
        boolean assignedSchema = false;
        try {
            t = jj_consume_token(ALPHANUM);
            lhs.add("varID", variableID).add("varName", t.image).add("varType", "Relation");jObject.add("LHS", lhs.build());
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case LESS:{
                    jj_consume_token(LESS);
                    s = jj_consume_token(ALPHANUM);
                    varObj.add(key[0], s.image);
                    jj_consume_token(COLON);
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case STRING:{
                            s = jj_consume_token(STRING);
                            break;
                        }
                        case DATE:{
                            s = jj_consume_token(DATE);
                            break;
                        }
                        case INT:{
                            s = jj_consume_token(INT);
                            break;
                        }
                        case TEXT:{
                            s = jj_consume_token(TEXT);
                            break;
                        }
                        default:
                            jj_la1[73] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    varObj.add(key[1], s.image); tempAryBuild.add(varObj);
                    label_25:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[74] = jj_gen;
                                break label_25;
                        }
                        jj_consume_token(COMMA);
                        s = jj_consume_token(ALPHANUM);
                        varObj = Json.createObjectBuilder().add(key[0], s.image);
                        jj_consume_token(COLON);
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case STRING:{
                                s = jj_consume_token(STRING);
                                break;
                            }
                            case DATE:{
                                s = jj_consume_token(DATE);
                                break;
                            }
                            case INT:{
                                s = jj_consume_token(INT);
                                break;
                            }
                            case TEXT:{
                                s = jj_consume_token(TEXT);
                                break;
                            }
                            default:
                                jj_la1[75] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        varObj.add(key[1], s.image); tempAryBuild.add(varObj);
                    }
                    jj_consume_token(GREATER);
                    assignedSchema=true;
                    break;
                }
                default:
                    jj_la1[76] = jj_gen;
                    ;
            }
            jj_consume_token(COLON);
            jj_consume_token(EQAL);
            tempAry = SQLExpression(jObject, assignedSchema);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (assignedSchema) {
                tempAry = tempAryBuild.build();
                jObject.add("schemas", tempAry);
            }
//else {
//  temp = jObject;
//  tempAry = temp.build().getJsonArray("schemas");}
//if(block.length!=0){
//lhs.add("blockID", block[0]);}
            schemas = JsonUtil.jsonArrayToMap(tempAry,key[0], key[1]);
//lhs.add("schemas", tempAry);
            RelationTableEntry vtEntry = new RelationTableEntry(t.image, schemas);
            vtable.insertEntry(variableID, vtEntry);
            variableID = variableID+1;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public JsonObjectBuilder MATRIXASSIGNMENT(JsonObjectBuilder l, String name, Integer... block) throws ParseException {/*@bgen(jjtree) MATRIXASSIGNMENT */
        ASTMATRIXASSIGNMENT jjtn000 = new ASTMATRIXASSIGNMENT(JJTMATRIXASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);MatrixTableEntry vtEntry; Integer rowSize = 0; String hasValue = "true";
        Integer size = 0; Integer size2 = 0; String varType; JsonArrayBuilder value = Json.createArrayBuilder();
        JsonArray tempValue; Integer vID; Integer bID; Token t; Token var; JsonObjectBuilder tempJB; Integer type;
        Token dt;String typeString; Token sc;JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();JsonArrayBuilder temp = Json.createArrayBuilder();
        try {
            jj_consume_token(StartSQBracket);
            tempJB = Json.createObjectBuilder();
            LISTEXPRESSION(tempJB, block);
            JsonObject tempObj = tempJB.build();
            size = tempObj.getInt("size"); tempValue = tempObj.getJsonArray("value"); value.add(tempValue);
            if(tempObj.getString("elementtype")!="Integer"){{if (true) throw new IllegalArgumentException();}}
            if (tempObj.getString("hasValue")=="false"){hasValue="false";}
            rowSize= rowSize+1;
            label_26:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[77] = jj_gen;
                        break label_26;
                }
                jj_consume_token(COMMA);
                tempJB = Json.createObjectBuilder();
                LISTEXPRESSION(tempJB, block);
                tempObj = tempJB.build();size2 = tempObj.getInt("size");
                if(size2!=size){{if (true) throw new IllegalArgumentException();}}
                if(tempObj.getString("elementtype")!="Integer"){{if (true) throw new IllegalArgumentException();}}
                tempValue = tempObj.getJsonArray("value"); value.add(tempValue);
                if (tempObj.getString("hasValue")=="false"){hasValue="false";}
                rowSize = rowSize+1;
            }
            jj_consume_token(EndSQBracket);
            JsonArray matValue = value.build();
            typeString = "Matrix"; lhs.add("varName", name).add("varID", variableID).add("varType", typeString);rhs.add("value",matValue);lhs.add("rowSize", rowSize); lhs.add("colSize", size);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("LHS", lhs.build());
            l.add("RHS", rhs.build());
            if (hasValue.equals("true")){
                double[][] valueList = ParserUtil.jsonArrayToMatrix(matValue);
                vtEntry = new MatrixTableEntry(name, valueList, block);}
            else{ vtEntry = new MatrixTableEntry(name,rowSize, size, block);}
            vtable.insertEntry(variableID, vtEntry);
            variableID = variableID+1;
            l.add( "blockType", "matrixAssign");
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // Inside LITERALASSIGNMENT
    final public JsonObjectBuilder LITERALASSIGNMENT(JsonObjectBuilder l, String name, Integer... block) throws ParseException {/*@bgen(jjtree) LITERALASSIGNMENT */
        ASTLITERALASSIGNMENT jjtn000 = new ASTLITERALASSIGNMENT(JJTLITERALASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Object value = null; VariableTableEntry vtEntry; Integer vID; Integer bID; Token t;Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Token idx1 = new Token(); Token idx2 = new Token();Integer type; Token dt;String typeString; Token sc;JsonObjectBuilder lhs = Json.createObjectBuilder();JsonObjectBuilder rhs = Json.createObjectBuilder();JsonArrayBuilder temp = Json.createArrayBuilder();
        try {
            lhs.add("varName", name);
            if (jj_2_45(5)) {
                t = jj_consume_token(DIGITS);
                l.add("blockType", "ConstantAssign");typeString = "Integer"; lhs.add("varType", typeString);rhs.add("varValue", t.image);value = Integer.parseInt(t.image);vtEntry  = new LiteralTableEntry(name, DataTypeEnum.valueOf("Integer").ordinal(),value,  block);
            } else if (jj_2_46(5)) {
                t = jj_consume_token(QUOTED_IDENTIFIER);
                l.add("blockType", "ConstantAssign");rhs.add("varValue", t.image);typeString = "String";lhs.add("varType", typeString); value = t.image.substring(1, t.image.length()-1); vtEntry  =new LiteralTableEntry(name, DataTypeEnum.valueOf("String").ordinal(),value,  block);
            } else if (jj_2_47(5)) {
                t = jj_consume_token(ALPHANUM);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case StartSQBracket:{
                        jj_consume_token(StartSQBracket);
                        idx1 = jj_consume_token(DIGITS);
                        jj_consume_token(EndSQBracket);
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case StartSQBracket:{
                                jj_consume_token(StartSQBracket);
                                idx2 = jj_consume_token(DIGITS);
                                jj_consume_token(EndSQBracket);
                                break;
                            }
                            default:
                                jj_la1[78] = jj_gen;
                                ;
                        }
                        break;
                    }
                    default:
                        jj_la1[79] = jj_gen;
                        ;
                }
                Pair<Integer, Integer> vIDbID = vtable.searchVariable(t.image, block);
                vID = vIDbID.first; bID = vIDbID.second;
                vtEntry = vtable.getVarTableEntryForComposite(vID, name, idx1.image,idx2.image, block);
                typeString = DataTypeEnum.values()[vtEntry.getType()].name();
                value = vtEntry.getValue();
                if (!(value==null)){
                    l.add("blockType", "ConstantAssign");
                    if(typeString == "String"){
                        lhs.add("value", (String) value);}
                    else if (typeString == "Integer"){
                        lhs.add("value", (Integer) value);
                    }
                }
                else {l.add("blockType", "varAssign");}
                JsonObjectBuilder rhsObj = Json.createObjectBuilder().add("varName", t.image).add("varID", vID);
                if (idx1.image != null) {rhs.add("rowIndex", Integer.parseInt(idx1.image));}
                if (idx2.image != null) {rhs.add("colIndex", Integer.parseInt(idx2.image));}
                lhs.add("varType",typeString);rhs.add("varName", t.image).add("varID", vID);
                if (bID != -1) {rhs.add("localVar", "true").add("blockID", bID);}
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (block.length == 0) {
                vtable.insertEntry(variableID, vtEntry);
                lhs.add("varID", variableID);
                variableID =variableID+1;
            }
            l.add("LHS", lhs.build());
            l.add("RHS", rhs.build());
            {if ("" != null) return l;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder MATHASSIGNMENT(JsonObjectBuilder l, String name, Integer... block) throws ParseException {/*@bgen(jjtree) MATHASSIGNMENT */
        ASTMATHASSIGNMENT jjtn000 = new ASTMATHASSIGNMENT(JJTMATHASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder lhs = Json.createObjectBuilder();JsonObjectBuilder rhs = Json.createObjectBuilder(); String typeString;
        try {
            JsonObjectBuilder tempJB = Json.createObjectBuilder();
            MATHEXPRESSION(tempJB, block);
            lhs.add("varName", name); JsonObject tempObj = tempJB.build();  typeString=tempObj.getString("type");lhs.add("varType",typeString);
            rhs.add("vLeft", tempObj.getJsonObject("vLeft")).add("operation", tempObj.getString("operation")).add("vRight", tempObj.getJsonObject("vRight"));
            l.add("LHS", lhs.build());
            l.add("RHS", rhs.build());
            if (block.length == 0){
                lhs.add("varID", variableID);
                VariableTableEntry vte =  VariableTable.createVariableEntry(name,typeString, block);
                vtable.insertEntry(variableID, vte);
                variableID =variableID+1;}
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder MATHEXPRESSION(JsonObjectBuilder l, Integer... block) throws ParseException {/*@bgen(jjtree) MATHEXPRESSION */
        ASTMATHEXPRESSION jjtn000 = new ASTMATHEXPRESSION(JJTMATHEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObjectBuilder vLeft = Json.createObjectBuilder();JsonObjectBuilder vRight = Json.createObjectBuilder();Token t;Token op;String t1; String t2;String operation; Pair<Integer, Integer> vIDbID; Integer bID; Integer vID; Integer type; String typeString;
        try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:{
                    t = jj_consume_token(DIGITS);
                    t1 = "Integer";vLeft.add("value", t.image);
                    break;
                }
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    vIDbID = vtable.searchVariable(t.image, block);vID = vIDbID.first; vLeft.add("varID", vID); bID = vIDbID.second;
                    if(bID != -1) {
                        vLeft.add("localVar", "true").add("blockID", bID);
                    }
                    vLeft.add("varName", t.image);t1 = vtable.getVarType(vID);
                    break;
                }
                case QUOTED_IDENTIFIER:{
                    t = jj_consume_token(QUOTED_IDENTIFIER);
                    t1 = "String";vLeft.add("value", t.image.substring(1, t.image.length()-1));
                    break;
                }
                case StartSQBracket:{
                    LISTEXPRESSION(vLeft);
                    t1 = "List";
                    break;
                }
                default:
                    jj_la1[80] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            vLeft.add("type", t1);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case PLUS:{
                    jj_consume_token(PLUS);
                    operation ="+";
                    break;
                }
                case MINUS:{
                    jj_consume_token(MINUS);
                    operation ="-";
                    break;
                }
                default:
                    jj_la1[81] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:{
                    t = jj_consume_token(DIGITS);
                    t2 = "Integer";vRight.add("value", t.image);
                    break;
                }
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    vIDbID = vtable.searchVariable(t.image, block); vID = vIDbID.first; vRight.add("varID", vID); bID = vIDbID.second;
                    vID = vIDbID.first; vLeft.add("varID", vID); bID = vIDbID.second;
                    if(bID != -1) {
                        vRight.add("localVar", "true").add("blockID", bID);
                    }
                    vRight.add("varName", t.image);  t2= vtable.getVarType(vID);
                    break;
                }
                case StartSQBracket:
                case QUOTED_IDENTIFIER:{
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case QUOTED_IDENTIFIER:{
                            t = jj_consume_token(QUOTED_IDENTIFIER);
                            t2 = "String";vRight.add("value", t.image.substring(1, t.image.length()-1));
                            break;
                        }
                        case StartSQBracket:{
                            LISTEXPRESSION(vRight);
                            t2 = "List";
                            break;
                        }
                        default:
                            jj_la1[82] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                }
                default:
                    jj_la1[83] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            vRight.add("type", t2);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            typeString = ParserUtil.mathOperationOutputType(t1, t2, operation);
            l.add("vLeft", vLeft.build());
            l.add("operation", operation);
            l.add("vRight", vRight.build());
            l.add("type",typeString);
//VariableTableEntry vte = new VariableTableEntry(name, typeString, block);
//lhs.add("type", typeString);
//l.add("LHS", lhs);
//l.add("RHS", rhs);
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void TUPLEASSIGNMENT(JsonObjectBuilder l, String name, Integer... block) throws ParseException {/*@bgen(jjtree) TUPLEASSIGNMENT */
        ASTTUPLEASSIGNMENT jjtn000 = new ASTTUPLEASSIGNMENT(JJTTUPLEASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableTableEntry vtEntry; Integer vID; Integer bID; Token t; Token var;
        JsonObjectBuilder tempJB = Json.createObjectBuilder();  Integer type;
        JsonObjectBuilder lhs = Json.createObjectBuilder();JsonObjectBuilder rhs = Json.createObjectBuilder();JsonArrayBuilder temp = Json.createArrayBuilder();
        List<String> elementTypes = new ArrayList<String>();
        JsonObject tempObj;  boolean hasValue = true; String typeString;
        try {
            lhs.add("varName", name).add("varType", "Tuple");
            if (block.length==1){
                lhs.add("blockID", block[0]);
            }
            jj_consume_token(TUPLE);
            jj_consume_token(FBRACKETSTART);
            jj_consume_token(StartSQBracket);
            tempObj = ListElement(block);
            int size = 1; typeString = tempObj.getString("typeString");
            elementTypes.add(typeString);
            if (tempObj.getString("hasValue").equals("true")) {
                if (typeString.equals("Integer")){temp.add(tempObj.getInt("value"));}
                else if (typeString.equals("String")){temp.add(tempObj.getString("value"));}
            }
            else {hasValue = false; temp.add(tempObj.getJsonObject("value"));}
            label_27:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[84] = jj_gen;
                        break label_27;
                }
                jj_consume_token(COMMA);
                tempObj = ListElement(block);
//ParserUtil.typeCompatible(typeString, typeString2);
                typeString = tempObj.getString("typeString");
                elementTypes.add(typeString);
                if (tempObj.getString("hasValue").equals("true")) {
                    if (typeString.equals("Integer")){temp.add(tempObj.getInt("value"));}
                    else if (typeString.equals("String")){temp.add(tempObj.getString("value"));}
                }
                else {hasValue = false; temp.add(tempObj.getJsonObject("value"));}
                size = size + 1;
            }
            jj_consume_token(EndSQBracket);
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            JsonArray value = temp.build();
            rhs.add("value", value);
            if (block.length == 0) {
                lhs.add("varID", variableID);
                if (hasValue){
                    List<Object> valueList = ParserUtil.jsonArrayToListWithDifferentEleType(value, elementTypes);
                    vtEntry = new TupleTableEntry(name,elementTypes, size, valueList, block);}
                else{ vtEntry = new TupleTableEntry(name, elementTypes, size, block);}
                vtable.insertEntry(variableID, vtEntry);
                variableID =variableID+1;}
            lhs.add("elementTypes", JsonUtil.arrayToJsonArray(elementTypes)).add("size", size);
            l.add("LHS", lhs.build()).add("RHS", rhs.build());
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TUPLEEXTRACTION(JsonObjectBuilder jobject, String name, Integer... block) throws ParseException {/*@bgen(jjtree) TUPLEEXTRACTION */
        ASTTUPLEEXTRACTION jjtn000 = new ASTTUPLEEXTRACTION(JJTTUPLEEXTRACTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token var; Token idx;
        JsonObjectBuilder tupleVar = Json.createObjectBuilder(); String vType; List<String> types;
        JsonObjectBuilder lhs = Json.createObjectBuilder(); JsonObjectBuilder rhs = Json.createObjectBuilder(); Integer index; Integer vID; Integer bID;
        Pair<Integer, Integer> vIDbID;
        try {
            var = jj_consume_token(ALPHANUM);
            vIDbID = vtable.searchVariable(var.image, block);
            vID = vIDbID.first; bID = vIDbID.second;
            tupleVar.add("varName", var.image).add("varID", vID).add("varType", "tuple");
            if (bID != -1) {
                tupleVar.add("localVar", "true").add("blockID", bID);
            }
            TupleTableEntry xt = (TupleTableEntry) vtable.getVariableProperties(vID);
            types = xt.getTypes();
            jj_consume_token(DOT);
            jj_consume_token(PLACEHOLDER);
            idx = jj_consume_token(DIGITS);
            index =Integer.parseInt(idx.image); vType = types.get(index);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            lhs.add("varName", name).add("varType", vType);
            rhs.add("tupleVariable", tupleVar.build()).add("index", index);
            jobject.add("LHS", lhs.build()).add("RHS", rhs.build());
            if (block.length == 0) {
                VariableTableEntry vtEntry = vtable.createVariableEntry(name,vType);
                vtable.insertEntry(variableID, vtEntry);
                lhs.add("varID", variableID);
                variableID += 1;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public JsonObjectBuilder LISTASSIGNMENT(JsonObjectBuilder l, String name, Integer... block) throws ParseException {/*@bgen(jjtree) LISTASSIGNMENT */
        ASTLISTASSIGNMENT jjtn000 = new ASTLISTASSIGNMENT(JJTLISTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);VariableTableEntry vtEntry; Integer vID; Integer bID; Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); String typeString; Integer type; Token dt; Token sc;JsonObjectBuilder lhs = Json.createObjectBuilder();JsonObjectBuilder rhs = Json.createObjectBuilder();JsonArrayBuilder temp = Json.createArrayBuilder();
        try {
            lhs.add("varName", name);
            if (jj_2_48(5)) {
                LISTEXPRESSION(tempJB);
                JsonObject tempObj = tempJB.build(); Integer size = tempObj.getInt("size"); lhs.add("size", size);  typeString = tempObj.getString("elementtype");lhs.add("elementType", typeString);
                JsonArray value = tempObj.getJsonArray("value");
                rhs.add("value", value);
                l.add("blockType", "ConstantAssign");
                if (block.length == 0) {
                    lhs.add("varID", variableID);
                    if (tempObj.getString("hasValue").equals("true")){
                        ArrayList<Object> valueList = ParserUtil.jsonArrayToList(value, typeString);
                        vtEntry = new ListTableEntry(name,DataTypeEnum.valueOf(typeString).ordinal(), size, valueList, block);}
                    else{ vtEntry = new ListTableEntry(name,DataTypeEnum.valueOf(typeString).ordinal(), size, block);}
                    vtable.insertEntry(variableID, vtEntry);
                    variableID =variableID+1;
                }
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case StartSQBracket:{
                        jj_consume_token(StartSQBracket);
                        jj_consume_token(LOAD);
                        jj_consume_token(FROM);
                        t = jj_consume_token(QUOTED_IDENTIFIER);
                        rhs.add("data-path", t.image);
                        jj_consume_token(AS);
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case LIST:{
                                dt = jj_consume_token(LIST);
                                typeString = "List";
                                break;
                            }
                            case STRING:{
                                dt = jj_consume_token(STRING);
                                typeString = "String";
                                break;
                            }
                            default:
                                jj_la1[85] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        lhs.add("elementType", typeString);
                        jj_consume_token(EndSQBracket);
                        if (block.length == 0) {
                            lhs.add("varID", variableID);
                            vtEntry = new ListTableEntry(name, block); ((ListTableEntry) vtEntry).setElementType(DataTypeEnum.valueOf(typeString).ordinal());
                            vtable.insertEntry(variableID, vtEntry); l.add("blockType", "loadFile");
                            variableID =variableID+1;
                        }
                        break;
                    }
                    default:
                        jj_la1[86] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            lhs.add("varType", "List");
            l.add("LHS", lhs.build());l.add("RHS", rhs.build());

            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder STRINGASSIGNMENT(JsonObjectBuilder l) throws ParseException {/*@bgen(jjtree) STRINGASSIGNMENT */
        ASTSTRINGASSIGNMENT jjtn000 = new ASTSTRINGASSIGNMENT(JJTSTRINGASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token var; JsonObjectBuilder tempJB = Json.createObjectBuilder(); Token x;
        try {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return l;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObject ListElement(Integer... block) throws ParseException {/*@bgen(jjtree) ListElement */
        ASTListElement jjtn000 = new ASTListElement(JJTLISTELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Integer vID; Object value;  JsonObjectBuilder l = Json.createObjectBuilder(); Token t;String typeString;
        String hasValue = "true"; Pair<Integer, Integer> vIDbID; Integer bID;
        try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:{
                    t = jj_consume_token(DIGITS);
                    typeString = "Integer";l.add("value", Integer.parseInt(t.image));
                    break;
                }
                case QUOTED_IDENTIFIER:{
                    t = jj_consume_token(QUOTED_IDENTIFIER);
                    typeString="String";l.add("value", t.image.substring(1, t.image.length()-1));
                    break;
                }
                case ALPHANUM:{
                    t = jj_consume_token(ALPHANUM);
                    vIDbID = vtable.searchVariable(t.image, block); vID = vIDbID.first; bID = vIDbID.second;
                    typeString=vtable.getVarType(vID);
                    value = vtable.getVariableProperties(vID).getValue();
                    if (value == null || !(typeString.equals("String")||typeString.equals("Integer"))){
                        hasValue = "false";
                        JsonObjectBuilder tempJB = Json.createObjectBuilder().add("varID",vID).add("type", typeString);
                        if (bID != -1) {
                            tempJB.add("localVar", "true").add("blockID", bID);
                        }
                        l.add("value", tempJB.build());
                    }
                    else if (typeString.equals("String")){
                        l.add("value", (String) value);
                    }
                    else if (typeString.equals("Integer"))
                    {l.add("value", (Integer) value);}
                    break;
                }
                default:
                    jj_la1[87] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("typeString", typeString);
            l.add("hasValue", hasValue);
            {if ("" != null) return l.build();}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public JsonObjectBuilder LISTEXPRESSION(JsonObjectBuilder l, Integer... block) throws ParseException {/*@bgen(jjtree) LISTEXPRESSION */
        ASTLISTEXPRESSION jjtn000 = new ASTLISTEXPRESSION(JJTLISTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);JsonObject tempObj;  String hasValue = "true";
        Integer vID; Integer type; String typeString; String typeString2; Token t;  Token x;JsonArrayBuilder temp = Json.createArrayBuilder();
        try {
            jj_consume_token(StartSQBracket);
            tempObj = ListElement(block);
            int size = 1; typeString = tempObj.getString("typeString");
            if (tempObj.getString("hasValue").equals("true")) {
                if (typeString.equals("Integer")){temp.add(tempObj.getInt("value"));}
                else if (typeString.equals("String")){temp.add(tempObj.getString("value"));}
            }
            else {hasValue = "false"; temp.add(tempObj.getJsonObject("value"));}
            label_28:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case COMMA:{
                        ;
                        break;
                    }
                    default:
                        jj_la1[88] = jj_gen;
                        break label_28;
                }
                jj_consume_token(COMMA);
                tempObj = ListElement(block);
//ParserUtil.typeCompatible(typeString, typeString2);
                typeString2 = tempObj.getString("typeString");
                if (!typeString.equals(typeString2)){
                    {if (true) throw new IllegalArgumentException(typeString+" is not compatible with "+typeString2);}
                }
                if (tempObj.getString("hasValue").equals("true")) {
                    if (typeString.equals("Integer")){temp.add(tempObj.getInt("value"));}
                    else if (typeString.equals("String")){temp.add(tempObj.getString("value"));}
                }
                else {hasValue = "false"; temp.add(tempObj.getJsonObject("value"));}
                size = size + 1;
            }
            jj_consume_token(EndSQBracket);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("size", size);
            l.add("elementtype", typeString);
            l.add("value", temp.build());
            l.add("hasValue", hasValue);
            {if ("" != null) return l;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    //JsonObjectBuilder CONCATENATE(JsonObjectBuilder l, Integer... block) : {Token t; Token col; Token x;JsonObjectBuilder tempJBLeft = Json.createObjectBuilder();JsonObjectBuilder tempJBRight = Json.createObjectBuilder();Integer vID;}
//{
//
// (LISTEXPRESSION(tempJBLeft)|(col=<ALPHANUM>{vID = vtable.searchVariable(col.image, block);
// ListTableEntry xt = (ListTableEntry) vtable.getVariableProperties(vID);
// int type = xt.getElementType();
// String elementType=DataTypeEnum.values()[type].name();tempJBLeft.add("name", col.image);tempJBLeft.add("varID", vID);tempJBLeft.add("elementtype", elementType);}))
// <PLUS>(LOOKAHEAD(10) CONCATENATE(tempJBRight)|LISTEXPRESSION(tempJBRight)|(col=<ALPHANUM>{vID = vtable.searchVariable(col.image, block); int type = vtable.getVariableProperties(vID).getType(); String elementType=DataTypeEnum.values()[type].name();
// tempJBRight.add("name", col.image);tempJBLeft.add("varID", vID);tempJBRight.add("elementtype", elementType);}))
//
//  {l.add("vLeft", tempJBLeft.build());
//  l.add("vRight", tempJBRight.build());
//  return l;}
//}
    final public

    String exprsforLambda(String vType, Integer eleType) throws ParseException {/*@bgen(jjtree) exprsforLambda */
        ASTexprsforLambda jjtn000 = new ASTexprsforLambda(JJTEXPRSFORLAMBDA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String lambdaType;
        try {
            if (jj_2_49(3)) {
                jj_consume_token(PLACEHOLDER);
                jj_consume_token(COLON);
                jj_consume_token(ROW);
                if (!vType.equals("Matrix") && !vType.equals("TextMatrix")) {{if (true) throw new IllegalArgumentException(vType +" can't be traversed by Row");} } lambdaType = "MatrixRow";
            } else if (jj_2_50(3)) {
                jj_consume_token(PLACEHOLDER);
                jj_consume_token(COLON);
                jj_consume_token(COLUMN);
                if (!vType.equals("Matrix") && !vType.equals("TextMatrix")) {{if (true) throw new IllegalArgumentException(vType +" can't be traversed by Column");}} lambdaType = "MatrixColumn";
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case PLACEHOLDER:{
                        jj_consume_token(PLACEHOLDER);
                        if (!vType.equals("List"))
                        {{if (true) throw new IllegalArgumentException(vType +" can't be traversed");} }
//     ListTableEntry vte = (ListTableEntry) vtable.getVariableProperties(vID);
//     Integer eleType = vte.getElementType();
                        if (eleType == 0) {{if (true) throw new IllegalArgumentException("List element type should be specified");}}
                        lambdaType = DataTypeEnum.values()[eleType].name();
                        break;
                    }
                    default:
                        jj_la1[89] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return lambdaType;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void exprsforLambdaDetail(JsonObjectBuilder l, String vType, Integer eleType) throws ParseException {/*@bgen(jjtree) exprsforLambdaDetail */
        ASTexprsforLambdaDetail jjtn000 = new ASTexprsforLambdaDetail(JJTEXPRSFORLAMBDADETAIL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_51(3)) {
                jj_consume_token(PLACEHOLDER);
                jj_consume_token(COLON);
                jj_consume_token(ROW);
                if (!vType.equals("Matrix") && !vType.equals("TextMatrix")) {{if (true) throw new IllegalArgumentException(vType +" can't be traversed by Row");} }
                l.add("traversetype", "Matrix").add("elementtype", "MatrixRow");
            } else if (jj_2_52(3)) {
                jj_consume_token(PLACEHOLDER);
                jj_consume_token(COLON);
                jj_consume_token(COLUMN);
                if (!vType.equals("Matrix") && !vType.equals("TextMatrix")) {{if (true) throw new IllegalArgumentException(vType +" can't be traversed by Column");}}
                l.add("traversetype","Matrix").add("elementtype", "MatrixColumn");
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case PLACEHOLDER:{
                        jj_consume_token(PLACEHOLDER);
                        if (!vType.equals("List"))
                        {{if (true) throw new IllegalArgumentException(vType +" can't be traversed");} }
                        l.add("traversetype", "List");
//     ListTableEntry vte = (ListTableEntry) vtable.getVariableProperties(vID);
//     Integer eleType = vte.getElementType();
                        if (eleType == 0) {{if (true) throw new IllegalArgumentException("List element type should be specified");}}
                        l.add("elementtype", DataTypeEnum.values()[eleType].name());
                        break;
                    }
                    default:
                        jj_la1[90] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            l.add("blockType", "lambdaVar");
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//JsonArrayBuilder RHSforLambda(): {
//    JsonObjectBuilder l = Json.createObjectBuilder();
//    JsonObjectBuilder jObj = Json.createObjectBuilder();
//    List<String> names = Arrays.asList("~");
//}
//{
//LOOKAHEAD(10) LITERALASSIGNMENT(l, "~") {jObj.add("type", l.getJsonObject("lhs").getString("varType"));} //add type and detail
//|AWSMFunction(l, names)
//{
//jObj.add("detail", l.build());
//return jObj;}}

    // parameters for a lambda function, can be integer, variable name which should be searched in block, or a lambda expression
    final public List<FuncInput> GetLambdaFunction(String vType, Integer pID, Integer eleType, Integer thisBlock, boolean[] tms, Integer... block) throws ParseException {/*@bgen(jjtree) GetLambdaFunction */
        ASTGetLambdaFunction jjtn000 = new ASTGetLambdaFunction(JJTGETLAMBDAFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean hasLambda; Token t; Token x; FuncInput f; List<FuncInput> result = new ArrayList<FuncInput>();
        String lambdaVarType;
        try {
            jj_consume_token(FBRACKETSTART);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DIGITS:
                case PLACEHOLDER:
                case ALPHANUM:
                case FIELDNAME:
                case QUOTED_IDENTIFIER:{
                    f = new FuncInput(); if (block.length == 1) {f.block = block[0];}
                    if (jj_2_53(3)) {
                        x = jj_consume_token(ALPHANUM);
                        jj_consume_token(EQAL);
                        f.key = x.image;
                    } else {
                        ;
                    }
                    if (jj_2_54(3)) {
                        t = jj_consume_token(ALPHANUM);
                        f.variable = true; f.name = t.image;
                    } else {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case FIELDNAME:{
                                t = jj_consume_token(FIELDNAME);
                                f.variable = true; f.name = t.image;
                                break;
                            }
                            case DIGITS:{
                                t = jj_consume_token(DIGITS);
                                f.value = Integer.parseInt(t.image); f.type = "Integer";
                                break;
                            }
                            case QUOTED_IDENTIFIER:{
                                t = jj_consume_token(QUOTED_IDENTIFIER);
                                f.value = t.image.substring(1, t.image.length()-1); f.type = "String";
                                break;
                            }
                            case PLACEHOLDER:{
                                lambdaVarType = exprsforLambda(vType, eleType);
                                f.variable = true; f.setParentVarID(pID); f.type = lambdaVarType; f.block = thisBlock;
                                if (lambdaVarType.equals("MatrixColumn")) {
                                    f.name = "_:Column";
                                    tms[0] = true;
                                }
                                else if (lambdaVarType.equals("MatrixRow")) {
                                    f.name = "_:Row";
                                    tms[0] = true;
                                    tms[1] = true;
                                }
                                else {f.name = "_";}
                                break;
                            }
                            default:
                                jj_la1[91] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    result.add(f);
                    label_29:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case COMMA:{
                                ;
                                break;
                            }
                            default:
                                jj_la1[92] = jj_gen;
                                break label_29;
                        }
                        f = new FuncInput(); if (block.length == 1) {f.block = block[0];}
                        jj_consume_token(COMMA);
                        if (jj_2_55(3)) {
                            x = jj_consume_token(ALPHANUM);
                            jj_consume_token(EQAL);
                            f.key = x.image;
                        } else {
                            ;
                        }
                        if (jj_2_56(3)) {
                            t = jj_consume_token(ALPHANUM);
                            f.variable = true; f.name = t.image;
                        } else {
                            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                                case FIELDNAME:{
                                    t = jj_consume_token(FIELDNAME);
                                    f.variable = true; f.name = t.image;
                                    break;
                                }
                                case DIGITS:{
                                    t = jj_consume_token(DIGITS);
                                    f.value = Integer.parseInt(t.image); f.type = "Integer";
                                    break;
                                }
                                case QUOTED_IDENTIFIER:{
                                    t = jj_consume_token(QUOTED_IDENTIFIER);
                                    f.value = t.image.substring(1, t.image.length()-1); f.type = "String";
                                    break;
                                }
                                case PLACEHOLDER:{
                                    lambdaVarType = exprsforLambda(vType, eleType);
                                    f.variable = true; f.setParentVarID(pID); f.type = lambdaVarType; f.block = thisBlock; if (lambdaVarType.equals("MatrixColumn")) {
                                        f.name = "_:Column";    tms[0] = true;
                                    }
                                    else if (lambdaVarType.equals("MatrixRow")) {
                                        f.name = "_:Row";          tms[0] = true;
                                        tms[1] = true;
                                    }
                                    else {f.name = "_";}
                                    break;
                                }
                                default:
                                    jj_la1[93] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                        result.add(f);
                    }
                    break;
                }
                default:
                    jj_la1[94] = jj_gen;
                    ;
            }
            jj_consume_token(FBRACKETEND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return result;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    //todo: add check for matrix column and row
// Function sub-expression it can be fucName(Parameters), p1.fucName(other parameters), lambdaExpression.fucName(others)
// a lambda function which is used insdei where expression can only generate one output, so the names are [~]
    final public void LambdaFunctionExprssion(JsonObjectBuilder l, Integer pID,  String vType, Integer eleType, Integer thisBlock, boolean[] TMs, Integer... block) throws ParseException {/*@bgen(jjtree) LambdaFunctionExprssion */
        ASTLambdaFunctionExprssion jjtn000 = new ASTLambdaFunctionExprssion(JJTLAMBDAFUNCTIONEXPRSSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v; Token t;
        String[] v1;
        String funName;
        List<FuncInput> parameter = new ArrayList<FuncInput>();
        List<FuncInput> tempParameter;
        List<String> names = Arrays.asList("~");
        JsonArrayBuilder parameterJson = Json.createArrayBuilder();
        JsonArrayBuilder outputVariable = Json.createArrayBuilder();
        JsonObjectBuilder temp = Json.createObjectBuilder();
        JsonObjectBuilder lhs = Json.createObjectBuilder();
        JsonObjectBuilder rhs = Json.createObjectBuilder();
        JsonObjectBuilder detail = Json.createObjectBuilder();
        JsonObject tempObj = Json.createObjectBuilder().build();
        String lambdaVarType;
        try {
            if (jj_2_57(5)) {
                t = jj_consume_token(ALPHANUM);
                funName = t.image; l.add("funcName", t.image);
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case FIELDNAME:{
                        v = jj_consume_token(FIELDNAME);
                        v1 = v.image.split("\u005c\u005c.");  FuncInput firstPara = new FuncInput(); firstPara.name = v1[0];
                        firstPara.variable = true; if(block.length == 1){firstPara.block = block[0];}
                        parameter.add(firstPara);funName = v1[1];l.add("funcName", funName);
                        break;
                    }
                    case PLACEHOLDER:{
                        lambdaVarType = exprsforLambda(vType, eleType);
                        jj_consume_token(DOT);
                        v = jj_consume_token(ALPHANUM);
                        FuncInput firstPara = new FuncInput();firstPara.block = thisBlock;
                        firstPara.setParentVarID(pID); firstPara.name = "_";
//firstPara.setIteratedVarID(vID);
                        firstPara.type = lambdaVarType;
                        parameter.add(firstPara);funName = v.image;l.add("funcName", funName);
                        break;
                    }
                    default:
                        jj_la1[95] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            tempParameter = GetLambdaFunction(vType, pID, eleType, thisBlock, TMs, block);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//JsonObject funcProp = ParserUtil.validateFunction(t.image); String output = funcProp.getString("output");
            //List<String> types = Arrays.asList(output.split("#"));

            parameter.addAll(tempParameter);
            Pair<List<FuncInput>, List<AwsmDataType>> allInfo = FunctionUtil.validateFunction(funName, parameter, names, vtable);
            List<FuncInput> input = allInfo.first;
            List<AwsmDataType> output = allInfo.second;
            // add input to the rhs of output json
            for (FuncInput f : input) {
                parameterJson.add(f.toJsonObject());
            }
            for (AwsmDataType d : output) {
                tempObj = d.toJsonObject(-1, block);
                outputVariable.add(tempObj);
            }
            lhs.add("variables",outputVariable.build());
            rhs.add("parameters",parameterJson.build());
            l.add("type", tempObj.getString("varType")).add("LHS", lhs.build()).add("RHS", rhs.build()).add("blockType", "FuncCall");
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

// add a util function where if a variable is in optional map and if so search the map otherwise search the vtable
// return a JsonObjectBuilder or not depends on


    // predicates expression used in whereexpression
// it can be _(:row or not) or a lambda function before or after an operator
// any parameter here expect _ can be a local variable and should be searched in block first
// todo: for any filter expression, add _ to table entry and then the function will search it, and _ alone will also search it
// todo: add a list of blockIDs if there are multiple layers blockes and should have a search order
    final public JsonObjectBuilder Expression(JsonObjectBuilder ope,  Integer pID, String vType, Integer elementType, Integer thisBlock, Integer... block) throws ParseException {/*@bgen(jjtree) Expression */
        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t; Token o1; Token opn; Token o2;
        JsonObjectBuilder l1 = Json.createObjectBuilder();
        JsonObject l1Obj;
        JsonObject l2Obj;
        JsonObjectBuilder l2 = Json.createObjectBuilder();
        String type1 = null;
        String type2 = null;
        boolean hasRightExpres = false;
        boolean[] TMs = new boolean[2];
        // the first boolean denotes if this is a TM, the second one denotes if this iterate through rows
        TMs[0] = false;
        TMs[1] = false;

//    boolean isLeftLambda = false;
//    boolean isRightLambda = false;
        Integer vID; Integer bID; Pair<Integer, Integer> vIDbID;
        try {
            if (jj_2_58(10)) {
                LambdaFunctionExprssion(l1, pID, vType, elementType, thisBlock, TMs, block);
                l1Obj = l1.build(); type1 = l1Obj.getString("type");
//isLeftLambda = (l1Obj.getString("blockID").equals("true"));

            } else if (jj_2_59(10)) {
                exprsforLambdaDetail(l1, vType, elementType);
// add the local varID for "_", if it is matrix column or row, then need to search "_:Column" or "_:Row"
                l1.add("localVariable", "true").add("parentID", pID).add("blockID", thisBlock);
                l1Obj = l1.build();type1 = l1Obj.getString("elementtype");
                if (type1.equals("MatrixColumn")) {
                    l1.add("varID", vtable.searchVariableInBlock("_:Column", thisBlock));
                    TMs[0] = true;
                }
                else if (type1.equals("MatrixRow")) {
                    l1.add("varID", vtable.searchVariableInBlock("_:Row", thisBlock));
                    TMs[0] = true; TMs[1] = true;
                }
                else {
                    l1.add("varID", vtable.searchVariableInBlock("_", thisBlock));
                }
            } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ALPHANUM:{
                        t = jj_consume_token(ALPHANUM);
//l1 = searchWithLocalVariable(t.image, vtable, localVar);
                        vIDbID = vtable.searchVariable(t.image, block); vID = vIDbID.first; bID = vIDbID.second; type1 = vtable.getVarType(vID);
                        l1.add("blockType", "varAssign").add("varName", t.image).add("varID", vID).add("varType", type1);
                        if (bID != -1) {
                            l1.add("localVar", "true").add("blockID", bID);
                        }
                        l1Obj = l1.build();
                        break;
                    }
                    case DOUBLES:{
                        t = jj_consume_token(DOUBLES);
                        l1.add("blockType", "ConstantAssign").add("type", "Double").add("value", t.image); l1Obj = l1.build(); type1 = "Double";
                        break;
                    }
                    case DIGITS:{
                        t = jj_consume_token(DIGITS);
                        l1.add("blockType", "ConstantAssign").add("type", "Integer").add("value", t.image); l1Obj = l1.build(); type1 = "Integer";
                        break;
                    }
                    case QUOTED_IDENTIFIER:{
                        t = jj_consume_token(QUOTED_IDENTIFIER);
                        l1.add("blockType", "ConstantAssign").add("type", "String").add("value", t.image.substring(1, t.image.length()-1)); l1Obj = l1.build(); type1 = "String";
                        break;
                    }
                    default:
                        jj_la1[96] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            ope.add("leftOperatee", l1Obj);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case EQAL:
                case GREATER:
                case LESS:
                case GREATERTHANEQUALS:
                case MINORTHANEQUALS:{
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case GREATERTHANEQUALS:{
                            opn = jj_consume_token(GREATERTHANEQUALS);
                            break;
                        }
                        case MINORTHANEQUALS:{
                            opn = jj_consume_token(MINORTHANEQUALS);
                            break;
                        }
                        case GREATER:{
                            opn = jj_consume_token(GREATER);
                            break;
                        }
                        case LESS:{
                            opn = jj_consume_token(LESS);
                            break;
                        }
                        case EQAL:{
                            opn = jj_consume_token(EQAL);
                            break;
                        }
                        default:
                            jj_la1[97] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    if (jj_2_60(10)) {
                        LambdaFunctionExprssion(l2, pID,  vType, elementType, thisBlock, TMs,  block);
                        l2Obj = l2.build(); type2 = l2Obj.getString("type");
//isRightLambda = (l2Obj.getString("hasLambda").equals("true"));

                    } else if (jj_2_61(10)) {
                        exprsforLambdaDetail(l2, vType, elementType);
                        l2.add("localVariable", "true").add("parentID", pID).add("blockID", thisBlock); l2Obj = l2.build(); type2 = l2Obj.getString("elementtype");
                        if (type2.equals("MatrixColumn")) {
                            l2.add("varID", vtable.searchVariableInBlock("_:Column", thisBlock));TMs[0] = true;
                        }
                        else if (type2.equals("MatrixRow")) {
                            l2.add("varID", vtable.searchVariableInBlock("_:Row", thisBlock));TMs[0] = true; TMs[1] = true;
                        }
                        else {
                            l2.add("varID", vtable.searchVariableInBlock("_", thisBlock));
                        }
                    } else {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case ALPHANUM:{
                                t = jj_consume_token(ALPHANUM);
//l2 = seachWithLocalVariable(t.image, vtable, localVar);
                                vIDbID = vtable.searchVariable(t.image, block); vID = vIDbID.first; bID = vIDbID.second;
                                type2 = vtable.getVarType(vID); l2.add("blockType", "varAssign").add("varName", t.image).add("varID", vID).add("varType", type2);
                                if (bID != -1) {
                                    l2.add("localVar", "true").add("blockID", bID);
                                }
                                l2Obj = l2.build();
                                break;
                            }
                            case DIGITS:{
                                t = jj_consume_token(DIGITS);
                                l2.add("blockType", "ConstantAssign").add("type", "Integer").add("value", Integer.parseInt(t.image));l2Obj = l2.build(); type2 = "Integer";
                                break;
                            }
                            case DOUBLES:{
                                t = jj_consume_token(DOUBLES);
                                l2.add("blockType", "ConstantAssign").add("type", "Double").add("value", t.image); l2Obj = l2.build(); type2 = "Double";
                                break;
                            }
                            case QUOTED_IDENTIFIER:{
                                t = jj_consume_token(QUOTED_IDENTIFIER);
                                l2.add("blockType", "ConstantAssign").add("type", "String").add("value", t.image.substring(1, t.image.length()-1));l2Obj = l2.build();type2 = "String";
                                break;
                            }
                            default:
                                jj_la1[98] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    ope.add("operator", opn.image); hasRightExpres = true; ope.add("blockType", "BiOperation").add("rightOperatee", l2Obj);
                    break;
                }
                default:
                    jj_la1[99] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
//if ((!isLeftLambda) && !(isRightLambda)) {
//  throw new IllegalArgumentException("the predicate returns constant");
//}

            if ((!hasRightExpres) && (!type1.equals("Boolean"))) {
                {if (true) throw new IllegalArgumentException("need to pass a boolean predicate");}
            }
//add some processing for LHS and RHS and verification
            else if (!type1.equals(type2)) {
                {if (true) throw new IllegalArgumentException("the types before and after the operator should match");}
            }
            if (TMs[0]) {
                if (TMs[1]) {
                    ope.add("iterateType", "MatrixRow");
                }
                else {
                    ope.add("iterateType", "MatrixColumn");
                }
            }

            {if ("" != null) return ope;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_1(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_2(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_3(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_4(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(3, xla); }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_5(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(4, xla); }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_6(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(5, xla); }
    }

    private boolean jj_2_7(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_7(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(6, xla); }
    }

    private boolean jj_2_8(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_8(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(7, xla); }
    }

    private boolean jj_2_9(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_9(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(8, xla); }
    }

    private boolean jj_2_10(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_10(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(9, xla); }
    }

    private boolean jj_2_11(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_11(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(10, xla); }
    }

    private boolean jj_2_12(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_12(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(11, xla); }
    }

    private boolean jj_2_13(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_13(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(12, xla); }
    }

    private boolean jj_2_14(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_14(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(13, xla); }
    }

    private boolean jj_2_15(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_15(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(14, xla); }
    }

    private boolean jj_2_16(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_16(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(15, xla); }
    }

    private boolean jj_2_17(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_17(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(16, xla); }
    }

    private boolean jj_2_18(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_18(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(17, xla); }
    }

    private boolean jj_2_19(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_19(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(18, xla); }
    }

    private boolean jj_2_20(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_20(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(19, xla); }
    }

    private boolean jj_2_21(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_21(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(20, xla); }
    }

    private boolean jj_2_22(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_22(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(21, xla); }
    }

    private boolean jj_2_23(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_23(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(22, xla); }
    }

    private boolean jj_2_24(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_24(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(23, xla); }
    }

    private boolean jj_2_25(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_25(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(24, xla); }
    }

    private boolean jj_2_26(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_26(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(25, xla); }
    }

    private boolean jj_2_27(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_27(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(26, xla); }
    }

    private boolean jj_2_28(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_28(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(27, xla); }
    }

    private boolean jj_2_29(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_29(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(28, xla); }
    }

    private boolean jj_2_30(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_30(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(29, xla); }
    }

    private boolean jj_2_31(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_31(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(30, xla); }
    }

    private boolean jj_2_32(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_32(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(31, xla); }
    }

    private boolean jj_2_33(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_33(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(32, xla); }
    }

    private boolean jj_2_34(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_34(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(33, xla); }
    }

    private boolean jj_2_35(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_35(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(34, xla); }
    }

    private boolean jj_2_36(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_36(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(35, xla); }
    }

    private boolean jj_2_37(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_37(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(36, xla); }
    }

    private boolean jj_2_38(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_38(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(37, xla); }
    }

    private boolean jj_2_39(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_39(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(38, xla); }
    }

    private boolean jj_2_40(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_40(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(39, xla); }
    }

    private boolean jj_2_41(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_41(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(40, xla); }
    }

    private boolean jj_2_42(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_42(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(41, xla); }
    }

    private boolean jj_2_43(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_43(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(42, xla); }
    }

    private boolean jj_2_44(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_44(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(43, xla); }
    }

    private boolean jj_2_45(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_45(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(44, xla); }
    }

    private boolean jj_2_46(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_46(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(45, xla); }
    }

    private boolean jj_2_47(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_47(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(46, xla); }
    }

    private boolean jj_2_48(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_48(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(47, xla); }
    }

    private boolean jj_2_49(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_49(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(48, xla); }
    }

    private boolean jj_2_50(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_50(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(49, xla); }
    }

    private boolean jj_2_51(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_51(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(50, xla); }
    }

    private boolean jj_2_52(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_52(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(51, xla); }
    }

    private boolean jj_2_53(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_53(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(52, xla); }
    }

    private boolean jj_2_54(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_54(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(53, xla); }
    }

    private boolean jj_2_55(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_55(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(54, xla); }
    }

    private boolean jj_2_56(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_56(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(55, xla); }
    }

    private boolean jj_2_57(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_57(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(56, xla); }
    }

    private boolean jj_2_58(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_58(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(57, xla); }
    }

    private boolean jj_2_59(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_59(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(58, xla); }
    }

    private boolean jj_2_60(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_60(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(59, xla); }
    }

    private boolean jj_2_61(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_61(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(60, xla); }
    }

    private boolean jj_3_41()
    {
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3R_46()
    {
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_3R_51()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_70()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(EndSQBracket)) return true;
        return false;
    }

    private boolean jj_3_40()
    {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3_14()
    {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(62)) {
            jj_scanpos = xsp;
            if (jj_scan_token(63)) {
                jj_scanpos = xsp;
                if (jj_scan_token(64)) return true;
            }
        }
        return false;
    }

    private boolean jj_3_13()
    {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3_39()
    {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_124()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        return false;
    }

    private boolean jj_3_12()
    {
        if (jj_3R_40()) return true;
        return false;
    }

    private boolean jj_3_38()
    {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3_11()
    {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3_50()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(COLUMN)) return true;
        return false;
    }

    private boolean jj_3_10()
    {
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3_49()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(ROW)) return true;
        return false;
    }

    private boolean jj_3R_108()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_49()) {
            jj_scanpos = xsp;
            if (jj_3_50()) {
                jj_scanpos = xsp;
                if (jj_3R_124()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_9()
    {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3_37()
    {
        if (jj_3R_49()) return true;
        return false;
    }

    private boolean jj_3R_49()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(WHERE)) return true;
        if (jj_3R_73()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_74()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3_8()
    {
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_31()
    {
        if (jj_scan_token(STORE)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(DBNAME)) return true;
        return false;
    }

    private boolean jj_3_7()
    {
        if (jj_3R_35()) return true;
        return false;
    }

    private boolean jj_3_6()
    {
        if (jj_3R_34()) return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3_4()
    {
        if (jj_3R_32()) return true;
        return false;
    }

    private boolean jj_3_3()
    {
        if (jj_3R_31()) return true;
        return false;
    }

    private boolean jj_3R_33()
    {
        if (jj_scan_token(REPORT)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_54()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_86()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(128)) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_64()
    {
        if (jj_scan_token(LESS)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(128)) return true;
                }
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_86()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GREATER)) return true;
        return false;
    }

    private boolean jj_3R_41()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_64()) jj_scanpos = xsp;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_3R_65()) return true;
        return false;
    }

    private boolean jj_3R_32()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_3R_49()) return true;
        return false;
    }

    private boolean jj_3R_34()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(MAP)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(MAPTO)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_37()) {
            jj_scanpos = xsp;
            if (jj_3_38()) {
                jj_scanpos = xsp;
                if (jj_3_39()) {
                    jj_scanpos = xsp;
                    if (jj_3_40()) {
                        jj_scanpos = xsp;
                        if (jj_3_41()) {
                            jj_scanpos = xsp;
                            if (jj_3_42()) {
                                jj_scanpos = xsp;
                                if (jj_3_43()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_44()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_55()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_56()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_57()) return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_76()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_71()) return true;
        return false;
    }

    private boolean jj_3R_87()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_51()
    {
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_3R_71()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_76()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(EndSQBracket)) return true;
        return false;
    }

    private boolean jj_3R_40()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_scan_token(RANGE)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_3R_63()) return true;
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_63()) return true;
        if (jj_scan_token(COMMA)) return true;
        return false;
    }

    private boolean jj_3R_30()
    {
        if (jj_scan_token(CREATE)) return true;
        if (jj_scan_token(ANALYSIS)) return true;
        return false;
    }

    private boolean jj_3_22()
    {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_98()
    {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    private boolean jj_3R_97()
    {
        if (jj_scan_token(LIST)) return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_scan_token(LIBRARY)) return true;
        return false;
    }

    private boolean jj_3R_102()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_101()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_65()
    {
        if (jj_scan_token(EXECUTESQL)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_87()) jj_scanpos = xsp;
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3R_85()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_63()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_84()) {
            jj_scanpos = xsp;
            if (jj_3R_85()) return true;
        }
        return false;
    }

    private boolean jj_3R_84()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_100()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_71()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_100()) {
            jj_scanpos = xsp;
            if (jj_3R_101()) {
                jj_scanpos = xsp;
                if (jj_3R_102()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_1()
    {
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_60()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(128)) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_37()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(LESS)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(128)) return true;
                }
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_60()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GREATER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_scan_token(EXECUTESOLR)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(TRIPLE_QUOTED)) return true;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3R_67()
    {
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_scan_token(LOAD)) return true;
        if (jj_scan_token(FROM)) return true;
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        if (jj_scan_token(AS)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_97()) {
            jj_scanpos = xsp;
            if (jj_3R_98()) return true;
        }
        if (jj_scan_token(EndSQBracket)) return true;
        return false;
    }

    private boolean jj_3R_38()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_3R_61()) return true;
        return false;
    }

    private boolean jj_3R_68()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_27()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_123()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_122()
    {
        if (jj_scan_token(DOUBLES)) return true;
        return false;
    }

    private boolean jj_3R_121()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_45()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_27()) {
            jj_scanpos = xsp;
            if (jj_3R_68()) return true;
        }
        if (jj_3R_69()) return true;
        return false;
    }

    private boolean jj_3R_81()
    {
        if (jj_scan_token(FBRACKETSTART)) return true;
        return false;
    }

    private boolean jj_3_48()
    {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3R_120()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3_61()
    {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_36()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_3R_58()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_3R_59()) return true;
        return false;
    }

    private boolean jj_3_60()
    {
        if (jj_3R_52()) return true;
        return false;
    }

    private boolean jj_3R_107()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(32)) {
            jj_scanpos = xsp;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                if (jj_scan_token(17)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(18)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(16)) return true;
                    }
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3_60()) {
            jj_scanpos = xsp;
            if (jj_3_61()) {
                jj_scanpos = xsp;
                if (jj_3R_120()) {
                    jj_scanpos = xsp;
                    if (jj_3R_121()) {
                        jj_scanpos = xsp;
                        if (jj_3R_122()) {
                            jj_scanpos = xsp;
                            if (jj_3R_123()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_36()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_106()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_35()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_105()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_134()
    {
        if (jj_scan_token(FALSEEX)) return true;
        return false;
    }

    private boolean jj_3R_43()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_48()) {
            jj_scanpos = xsp;
            if (jj_3R_67()) return true;
        }
        return false;
    }

    private boolean jj_3R_104()
    {
        if (jj_scan_token(DOUBLES)) return true;
        return false;
    }

    private boolean jj_3R_133()
    {
        if (jj_scan_token(TRUEEX)) return true;
        return false;
    }

    private boolean jj_3R_132()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_131()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_130()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_25()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(EQAL)) return true;
        return false;
    }

    private boolean jj_3_26()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_103()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_119()
    {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_25()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) {
            jj_scanpos = xsp;
            if (jj_3R_130()) {
                jj_scanpos = xsp;
                if (jj_3R_131()) {
                    jj_scanpos = xsp;
                    if (jj_3R_132()) {
                        jj_scanpos = xsp;
                        if (jj_3R_133()) {
                            jj_scanpos = xsp;
                            if (jj_3R_134()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_118()
    {
        if (jj_scan_token(FALSEEX)) return true;
        return false;
    }

    private boolean jj_3R_117()
    {
        if (jj_scan_token(TRUEEX)) return true;
        return false;
    }

    private boolean jj_3R_116()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_115()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3_34()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_114()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_33()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_23()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(EQAL)) return true;
        return false;
    }

    private boolean jj_3_24()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_61()
    {
        if (jj_scan_token(CONSTRUCTGRAPHFROMRELATION)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        return false;
    }

    private boolean jj_3R_111()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_110()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_59()
    {
        if (jj_scan_token(EXECUTECYPHER)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_83()) jj_scanpos = xsp;
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3R_83()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_110()) {
            jj_scanpos = xsp;
            if (jj_3R_111()) return true;
        }
        return false;
    }

    private boolean jj_3R_99()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_23()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) {
            jj_scanpos = xsp;
            if (jj_3R_114()) {
                jj_scanpos = xsp;
                if (jj_3R_115()) {
                    jj_scanpos = xsp;
                    if (jj_3R_116()) {
                        jj_scanpos = xsp;
                        if (jj_3R_117()) {
                            jj_scanpos = xsp;
                            if (jj_3R_118()) return true;
                        }
                    }
                }
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_119()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3_59()
    {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_69()
    {
        if (jj_scan_token(FBRACKETSTART)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_99()) jj_scanpos = xsp;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3_30()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_44()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(PLACEHOLDER)) return true;
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3_58()
    {
        if (jj_3R_52()) return true;
        return false;
    }

    private boolean jj_3R_73()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_58()) {
            jj_scanpos = xsp;
            if (jj_3_59()) {
                jj_scanpos = xsp;
                if (jj_3R_103()) {
                    jj_scanpos = xsp;
                    if (jj_3R_104()) {
                        jj_scanpos = xsp;
                        if (jj_3R_105()) {
                            jj_scanpos = xsp;
                            if (jj_3R_106()) return true;
                        }
                    }
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_107()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_82()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(83)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(85)) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_58()
    {
        if (jj_scan_token(LESS)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(127)) {
            jj_scanpos = xsp;
            if (jj_scan_token(125)) {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(83)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(85)) return true;
                    }
                }
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_82()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GREATER)) return true;
        return false;
    }

    private boolean jj_3_29()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_95()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_72()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_71()) return true;
        return false;
    }

    private boolean jj_3R_89()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3_32()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_78()
    {
        if (jj_3R_108()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_48()
    {
        if (jj_scan_token(TUPLE)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_3R_71()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_72()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(EndSQBracket)) return true;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3R_77()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_57()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_52()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_57()) {
            jj_scanpos = xsp;
            if (jj_3R_77()) {
                jj_scanpos = xsp;
                if (jj_3R_78()) return true;
            }
        }
        if (jj_3R_79()) return true;
        return false;
    }

    private boolean jj_3R_93()
    {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3_28()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3R_62()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3_31()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_75()
    {
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_scan_token(DIGITS)) return true;
        if (jj_scan_token(EndSQBracket)) return true;
        return false;
    }

    private boolean jj_3R_113()
    {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3R_112()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_96()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_112()) {
            jj_scanpos = xsp;
            if (jj_3R_113()) return true;
        }
        return false;
    }

    private boolean jj_3R_94()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_92()
    {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3R_91()
    {
        if (jj_3R_51()) return true;
        return false;
    }

    private boolean jj_3R_90()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_88()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_66()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_88()) {
            jj_scanpos = xsp;
            if (jj_3R_89()) {
                jj_scanpos = xsp;
                if (jj_3R_90()) {
                    jj_scanpos = xsp;
                    if (jj_3R_91()) return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_92()) {
            jj_scanpos = xsp;
            if (jj_3R_93()) return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_94()) {
            jj_scanpos = xsp;
            if (jj_3R_95()) {
                jj_scanpos = xsp;
                if (jj_3R_96()) return true;
            }
        }
        return false;
    }

    private boolean jj_3_21()
    {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3_19()
    {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3_20()
    {
        if (jj_3R_47()) return true;
        return false;
    }

    private boolean jj_3_18()
    {
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3_17()
    {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3_16()
    {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3_15()
    {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_138()
    {
        if (jj_3R_108()) return true;
        return false;
    }

    private boolean jj_3R_137()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_136()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_42()
    {
        if (jj_3R_66()) return true;
        return false;
    }

    private boolean jj_3R_135()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_56()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3_55()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(EQAL)) return true;
        return false;
    }

    private boolean jj_3R_129()
    {
        if (jj_scan_token(COMMA)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_55()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3_56()) {
            jj_scanpos = xsp;
            if (jj_3R_135()) {
                jj_scanpos = xsp;
                if (jj_3R_136()) {
                    jj_scanpos = xsp;
                    if (jj_3R_137()) {
                        jj_scanpos = xsp;
                        if (jj_3R_138()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_50()
    {
        if (jj_scan_token(StartSQBracket)) return true;
        if (jj_scan_token(DIGITS)) return true;
        if (jj_scan_token(EndSQBracket)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_75()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_74()
    {
        if (jj_scan_token(AND)) return true;
        if (jj_3R_73()) return true;
        return false;
    }

    private boolean jj_3R_35()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(REDUCE)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(FBRACKETSTART)) return true;
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(COMMA)) return true;
        return false;
    }

    private boolean jj_3R_128()
    {
        if (jj_3R_108()) return true;
        return false;
    }

    private boolean jj_3R_127()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_54()
    {
        if (jj_scan_token(COMMA)) return true;
        return false;
    }

    private boolean jj_3R_126()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_125()
    {
        if (jj_scan_token(FIELDNAME)) return true;
        return false;
    }

    private boolean jj_3_54()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        return false;
    }

    private boolean jj_3_53()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        if (jj_scan_token(EQAL)) return true;
        return false;
    }

    private boolean jj_3R_109()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_53()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3_54()) {
            jj_scanpos = xsp;
            if (jj_3R_125()) {
                jj_scanpos = xsp;
                if (jj_3R_126()) {
                    jj_scanpos = xsp;
                    if (jj_3R_127()) {
                        jj_scanpos = xsp;
                        if (jj_3R_128()) return true;
                    }
                }
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_129()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_79()
    {
        if (jj_scan_token(FBRACKETSTART)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_109()) jj_scanpos = xsp;
        if (jj_scan_token(FBRACKETEND)) return true;
        return false;
    }

    private boolean jj_3_47()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_50()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_46()
    {
        if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_45()
    {
        if (jj_scan_token(DIGITS)) return true;
        return false;
    }

    private boolean jj_3R_47()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_45()) {
            jj_scanpos = xsp;
            if (jj_3_46()) {
                jj_scanpos = xsp;
                if (jj_3_47()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_39()
    {
        if (jj_scan_token(ALPHANUM)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_62()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(EQAL)) return true;
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3_16()) {
                jj_scanpos = xsp;
                if (jj_3_17()) {
                    jj_scanpos = xsp;
                    if (jj_3_18()) {
                        jj_scanpos = xsp;
                        if (jj_3_19()) {
                            jj_scanpos = xsp;
                            if (jj_3_20()) {
                                jj_scanpos = xsp;
                                if (jj_3_21()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_57()
    {
        if (jj_3R_81()) return true;
        return false;
    }

    private boolean jj_3R_56()
    {
        if (jj_3R_65()) return true;
        return false;
    }

    private boolean jj_3R_80()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        return false;
    }

    private boolean jj_3R_55()
    {
        if (jj_3R_61()) return true;
        return false;
    }

    private boolean jj_3_44()
    {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3_52()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(COLUMN)) return true;
        return false;
    }

    private boolean jj_3_43()
    {
        if (jj_3R_47()) return true;
        return false;
    }

    private boolean jj_3_42()
    {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3_51()
    {
        if (jj_scan_token(PLACEHOLDER)) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_scan_token(ROW)) return true;
        return false;
    }

    private boolean jj_3R_53()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_51()) {
            jj_scanpos = xsp;
            if (jj_3_52()) {
                jj_scanpos = xsp;
                if (jj_3R_80()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_70()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_51()) return true;
        return false;
    }

    /** Generated Token Manager. */
    public AdilTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[100];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static private int[] jj_la1_4;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
        jj_la1_init_4();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x0,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x800000,0x10000000,0x0,0x8000,0x800,0x800000,0x800,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800000,0x800,0x800,0x0,0x800,0x0,0x8000,0x800000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,0x80000,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x40000,0x800000,0x4000000,0x4000000,0x4000800,0x1000,0x4000000,0x4000800,0x800000,0x0,0x4000000,0x800,0x800000,0x0,0x0,0x800,0x800000,0x800,0x800,0x0,0x1000800,0x70000,0x1000800,0x70000,};
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x0,0x200,0x0,0x0,0x4040000,0x0,0x0,0xc0000000,0x3000,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x8,0x0,0x8,0x2000000,0x0,0x0,0x3000,0x0,0x3000,0x3000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,};
    }
    private static void jj_la1_init_2() {
        jj_la1_2 = new int[] {0x2000000,0x2000000,0xc000,0x0,0x0,0x4,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280000,0x0,0x280000,0x0,0x280000,0x0,0x280000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
    }
    private static void jj_la1_init_3() {
        jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88000,0x80000,0xe0000000,0x0,0xe0000000,0xa0000,0xe0000000,0x0,0xe0000000,0x0,0x0,0xe0000000,0x0,0xe0000000,0x0,0xe0000000,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000010,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,};
    }
    private static void jj_la1_init_4() {
        jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x6,0x80,0x40,0x2,0x2,0x0,0x0,0x0,0x2,0x0,0x10,0x0,0x10,0x0,0x2,0x0,0x0,0x80,0x2,0x40,0x0,0x0,0x0,0x14,0x0,0x14,0x16,0x4,0x2,0x0,0x0,0x0,0x2,0x0,0x2,0x80,0x80,0x2,0x40,0x0,0x2,0x2,0x0,0x2,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x12,0x1,0x0,0x1,0x10,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x12,0x0,0x10,0x12,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0x14,0x0,0x14,0x16,0x4,0x12,0x0,0x12,0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[61];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public Adil(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public Adil(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new AdilTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public Adil(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new AdilTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public Adil(AdilTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(AdilTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 100; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error { }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0; Token tok = token;
            while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[])(it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[137];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 100; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1<<j)) != 0) {
                        la1tokens[32+j] = true;
                    }
                    if ((jj_la1_2[i] & (1<<j)) != 0) {
                        la1tokens[64+j] = true;
                    }
                    if ((jj_la1_3[i] & (1<<j)) != 0) {
                        la1tokens[96+j] = true;
                    }
                    if ((jj_la1_4[i] & (1<<j)) != 0) {
                        la1tokens[128+j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 137; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 61; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0: jj_3_1(); break;
                            case 1: jj_3_2(); break;
                            case 2: jj_3_3(); break;
                            case 3: jj_3_4(); break;
                            case 4: jj_3_5(); break;
                            case 5: jj_3_6(); break;
                            case 6: jj_3_7(); break;
                            case 7: jj_3_8(); break;
                            case 8: jj_3_9(); break;
                            case 9: jj_3_10(); break;
                            case 10: jj_3_11(); break;
                            case 11: jj_3_12(); break;
                            case 12: jj_3_13(); break;
                            case 13: jj_3_14(); break;
                            case 14: jj_3_15(); break;
                            case 15: jj_3_16(); break;
                            case 16: jj_3_17(); break;
                            case 17: jj_3_18(); break;
                            case 18: jj_3_19(); break;
                            case 19: jj_3_20(); break;
                            case 20: jj_3_21(); break;
                            case 21: jj_3_22(); break;
                            case 22: jj_3_23(); break;
                            case 23: jj_3_24(); break;
                            case 24: jj_3_25(); break;
                            case 25: jj_3_26(); break;
                            case 26: jj_3_27(); break;
                            case 27: jj_3_28(); break;
                            case 28: jj_3_29(); break;
                            case 29: jj_3_30(); break;
                            case 30: jj_3_31(); break;
                            case 31: jj_3_32(); break;
                            case 32: jj_3_33(); break;
                            case 33: jj_3_34(); break;
                            case 34: jj_3_35(); break;
                            case 35: jj_3_36(); break;
                            case 36: jj_3_37(); break;
                            case 37: jj_3_38(); break;
                            case 38: jj_3_39(); break;
                            case 39: jj_3_40(); break;
                            case 40: jj_3_41(); break;
                            case 41: jj_3_42(); break;
                            case 42: jj_3_43(); break;
                            case 43: jj_3_44(); break;
                            case 44: jj_3_45(); break;
                            case 45: jj_3_46(); break;
                            case 46: jj_3_47(); break;
                            case 47: jj_3_48(); break;
                            case 48: jj_3_49(); break;
                            case 49: jj_3_50(); break;
                            case 50: jj_3_51(); break;
                            case 51: jj_3_52(); break;
                            case 52: jj_3_53(); break;
                            case 53: jj_3_54(); break;
                            case 54: jj_3_55(); break;
                            case 55: jj_3_56(); break;
                            case 56: jj_3_57(); break;
                            case 57: jj_3_58(); break;
                            case 58: jj_3_59(); break;
                            case 59: jj_3_60(); break;
                            case 60: jj_3_61(); break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch(LookaheadSuccess ls) { }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) { p = p.next = new JJCalls(); break; }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
